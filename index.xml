<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mike Ball</title><link>/</link><description>Recent content on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Scalable Terraform patterns: compound workspace names</title><link>/blog/scalable-terraform-patterns-compound-workspace-names/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/scalable-terraform-patterns-compound-workspace-names/</guid><description>Problem statement As my colleague Brian Tajuddin posits in his rule of never just one:
Writing software these days involves asking the question &amp;ldquo;How many?&amp;rdquo; over and over again. There is one answer that&amp;rsquo;s always wrong.
You need to create and manage similar cloud infrastructure across many different AWS account/region combinations serving different logical environments, such as dev, staging, prod, etc.
For the most part, each environment should be the same as the others, infrastructure-wise.</description></item><item><title>Automated Terraform Plan Analysis With Terratest</title><link>/blog/automated-terraform-plan-analysis-with-terratest/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>/blog/automated-terraform-plan-analysis-with-terratest/</guid><description>How can terratest be used to automate Terraform plan analysis?
Problem You want to automate Terraform plan analysis in CI/CD, offsetting some of the manual toil associated with plan assessment. Tools like OPA offer policy-as-code solutions, but your team prefers to write Go.
Solution Usually, terratest is leveraged as a tool for authoring Terraform end-to-end tests that make post-terraform apply assertions on the correctness of the resulting infrastructure.
However, terratest can also be used to programmatically analyze Terraform plan output, effectively offering a Go-based alternative to tools like OPA and similar policy-as-code tools.</description></item><item><title>Unit Testing AWS S3 Downloads in Go</title><link>/blog/unit-testing-aws-s3-downloads-in-go/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>/blog/unit-testing-aws-s3-downloads-in-go/</guid><description>An example of github.com/aws/aws-sdk-go/awstesting/unit&amp;rsquo;s use.
Problem How do you unit test a Go function that wraps aws-sdk-go&amp;rsquo;s s3manager#Downloader.Download without issuing real HTTP requests to the AWS API (and without using an additional tool like localstack)?
Solution Make the implementation&amp;rsquo;s *s3manager.Downloader configurable; in testing, use the github.com/aws/aws-sdk-go/awstesting/unit package to create a custom *s3manager.Downloader that uses a local testdata directory as a mock AWS S3 bucket.
Example Consider a contrived s3object package. The package provides an S3Object type, which features a Download method that wraps s3manager#Downloader.</description></item><item><title>Using tfmigrate to Codify and Automate Terraform State Operations</title><link>/blog/using-tfmigrate-to-codify-and-automate-terraform-state-operations/</link><pubDate>Sun, 06 Aug 2023 13:35:02 +0000</pubDate><guid>/blog/using-tfmigrate-to-codify-and-automate-terraform-state-operations/</guid><description>An overview illustrating how tfmigrate can be used to codify and automate complex Terraform state operations. The corresponding reference example code can be viewed at github.com/mdb/tfmigrate-demo.
Problem The terraform CLI exposes a suite of state commands for advanced state management. However, these commands often require that engineers employ error-prone, manual, and ad hoc invocations of the terraform CLI out-of-band of CI/CD and code review.
How can we automate the migration of a Terraform-managed resource from one root module project configuration to a different root module project configuration, each using different S3 remote states?</description></item><item><title>Using the gh-dash gh CLI Extension to Manage GitHub Notifications</title><link>/blog/using-the-gh-dash-gh-cli-extension-to-manage-github-notifications/</link><pubDate>Wed, 31 May 2023 13:35:02 +0000</pubDate><guid>/blog/using-the-gh-dash-gh-cli-extension-to-manage-github-notifications/</guid><description>Written towards the goal of sharing my own practice with new team members, the following offers an overview of how I use the gh-dash CLI extension to manage GitHub notifications and pull request discussion.
Problem At scale, staying abreast of GitHub code review requests, GitHub issues of note, and related discussions is challenging. The challenges are further compounded when working across multiple GitHub organizations on both open and closed source projects, and especially when working as a member of multiple GitHub teams within one or more organizations.</description></item><item><title>Notes on Implementing Backstage</title><link>/blog/notes-on-implementing-backstage/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/notes-on-implementing-backstage/</guid><description>Spotify&amp;rsquo;s Backstage project has been enjoying some recent acclaim. A colleague asked about my experience implementing Backstage for a large organization. These are my quick, dirty, and not-quite-comprehensive-but-hopefully-still-useful-ish notes.
What is Backstage? Backstage bills itself as an &amp;ldquo;open platform for building developer portals.&amp;rdquo; As its backbone, Backstage offers a service catalog, but also a healthy ecosystem of plugins for integrating other, third party tools: stuff like CI/CD pipelines, observability dashboards, documentation, cloud providers, infrastructure-as-code resources, incident management, project management, etc.</description></item><item><title>Extending the gh CLI with Go</title><link>/blog/extending-the-gh-cli-with-go/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>/blog/extending-the-gh-cli-with-go/</guid><description>GitHub&amp;rsquo;s gh CLI can be enhanced via custom extensions. The following offers an introduction, as well as some notes and tips for doing so in Go.
What? Extensions How do gh extensions work? Implementation tips, suggestions, etc. Bonus experimental idea: bootstrapping developer experience and platform engineering Further reading What? Out of the box, the gh CLI supports a collection of commands for interacting with GitHub features like repositories, releases, pull requests, and more.</description></item><item><title>What is the Kubernetes controller pattern?</title><link>/blog/what-is-the-kubernetes-controller-pattern/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>/blog/what-is-the-kubernetes-controller-pattern/</guid><description>A colleague recently relayed to me their vision for a microservices architecture involving the automatic injection of sidecar containers to all Deployments&amp;rsquo; Pods within a Kubernetes namespace. Naive to Kubernetes&amp;rsquo; support for custom controllers, the colleague hoped to proof-of-concept the idea via enhanced CI/CD pipeline logic that opaquely extended Kubernetes Deployment manifest YAML prior to each application deployment. As an alternative, the following offers an overview of the Kubernetes controller pattern, as well as a tour of a basic reference implementation.</description></item><item><title>What is the Kubernetes Operator Pattern?</title><link>/blog/what-is-the-kubernetes-operator-pattern/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/what-is-the-kubernetes-operator-pattern/</guid><description>An overview of the Kubernetes operator pattern and the use of custom resources and custom controllers in extending Kubernetes functionality.
What? Broadly speaking, Kubernetes operators seek to abstract, codify, and automate operational tasks beyond what out-of-the-box Kubernetes itself provides.
As summarized in the CNCF Operator Whitepaper:
In Kubernetes, an operator provides intelligent, dynamic management capabilities by extending the functionality of the API.
These operator components allow for the automation of common processes as well as reactive applications that can continually adapt to their environment.</description></item><item><title>IP addressing, Networks, Subnets, and CIDR</title><link>/blog/ip-addressing-networks-subnets-and-cidr/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/ip-addressing-networks-subnets-and-cidr/</guid><description>Working with IP addresses, networks, subnets, and CIDR notation can be confusing. Intended as a resource for junior engineers &amp;ndash; as well as my own personal notes &amp;ndash; the following offers some overview, history, and an introduction to ipcalc.
Big disclaimer: I&amp;rsquo;m not a network engineer :)
IP addresses An internet protocal address is a numerical label connected to a computer network that uses the internet protocol for communication. IP addresses serve two main functions:</description></item><item><title>Advanced Terraform Logic</title><link>/blog/advanced-terraform-logic/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/advanced-terraform-logic/</guid><description>Critics argue Terraform is limiting and doesn&amp;rsquo;t adequately enable the expression of complex logic. While imperfect, Terraform does indeed often accommodate moderately complex logic. As a reference example, the following illustrates how Terraform constructs such as for_each, for/in, if, try, various functions, and custom local data structures can be used to successfully satisfy a relatively logic-intensive use case.
As a bonus, the reference example also teases some broader techniques for automating platform engineering across an organization.</description></item><item><title>Collecting Paginated HTTP API Response Data Using JavaScript's async/await</title><link>/blog/collecting-paginated-http-api-response-data-using-javascripts-async/await/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/collecting-paginated-http-api-response-data-using-javascripts-async/await/</guid><description>Collecting all pages of data from a paginated HTTP API can be a bit quirky in JavaScript, especially for those who are less familiar with asynchronous JavaScript&amp;rsquo;s nuances. The following offers a reference example using JavaScript&amp;rsquo;s async/await.
Problem You need to fetch all pages of data from a paginated HTTP API in JavaScript; you&amp;rsquo;d like to do so using fetch, and you&amp;rsquo;d like to leverage async/await.
To establish a bit more context, imagine&amp;hellip;</description></item><item><title>Querying GitHub Release Data With gh and jq</title><link>/blog/querying-github-release-data-with-gh-and-jq/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>/blog/querying-github-release-data-with-gh-and-jq/</guid><description>A demo of semi-advanced gh CLI and jq querying techniques.
Problem You&amp;rsquo;d like to list the latest patch release associated with each of the latest 5 minor versions of Grafana represented as a JSON array.
For example:
[&amp;#34;9.1.6&amp;#34;,&amp;#34;9.0.9&amp;#34;,&amp;#34;8.5.13&amp;#34;,&amp;#34;8.4.11&amp;#34;,&amp;#34;8.3.11&amp;#34;] Solution Leverage that&amp;hellip;
Grafana releases are published as GitHub releases The gh CLI supports an api command, enabling users to query GitHub API endpoints The GitHub API supports a list releases endpoint gh api supports a --jq flag, enabling the ability to invoke jq queries against GitHub API responses For example:</description></item><item><title>Terraform Provider Development Demystified</title><link>/blog/terraform-provider-development-demystified/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>/blog/terraform-provider-development-demystified/</guid><description>Many Terraform practitioners may be unfamiliar with provider development. How are providers actually implemented? The following offers an outline of a brief presentation I gave to the HBO Max Strategic Global Infrastructure team.
Review of the basics First, let&amp;rsquo;s establish a foundation, especially for those who may be less familiar with Terraform.
Terraform fundamentals Terraform enables users to describe infrastructure resources &amp;ndash; and their dependency relationships &amp;ndash; in .tf files using HCL, and to automate the creation and ongoing management of that infrastructure via the Terraform command line interface.</description></item><item><title>Mocking aws-sdk With Jest</title><link>/blog/mocking-aws-sdk-with-jest/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>/blog/mocking-aws-sdk-with-jest/</guid><description>A technique for mocking aws-sdk methods with jest without the use of aws-sdk-mock.
Problem Your Node.js application uses the aws-sdk NPM module via functions like getEksClusterCount, for example:
import AWS from &amp;#39;aws-sdk&amp;#39;; const export getEksClusterCount = async () =&amp;gt; { const eks = new AWS.EKS(); try { const clusters = await eks.listClusters().promise(); return clusters.length; catch (e) { throw e; } }; How can getEksClusterCount&amp;rsquo;s use of AWS.EKS be mocked out for unit testing?</description></item><item><title>Multi-stage Docker Builds</title><link>/blog/multi-stage-docker-builds/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/multi-stage-docker-builds/</guid><description>An introduction to leveraging multi-stage container image builds.
Problem Your application is deployed via a minimal OCI image, such as one produced by a Docker build. However, its build and test pipeline consists of many stages, each of which utilizes disparate technologies, system dependencies, and testing techniques. Consistently managing the build pipeline &amp;ndash; and its dependencies &amp;ndash; across local development environments and CI/CD systems is complicated. Perhaps its configuration and dependency management is spread across package.</description></item><item><title>Transforming Terraform Output Values to Markdown with Terraputs</title><link>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</guid><description>An introduction to using a tool I wrote, terraputs, to transform Terraform configuration output values to markdown. I owe a hat tip to my colleagues Justin LaRose and Travis Truman for giving me the idea to create terraputs.
Problem You&amp;rsquo;d like to publish your Terraform configuration&amp;rsquo;s up-to-date output values in a human-friendly, easy-to-read, accessible format. Perhaps you&amp;rsquo;d like to publish their current values to your project&amp;rsquo;s README.md, a wiki, or some other form of documentation.</description></item><item><title>Triggering GitHub Actions From Outside of GitHub</title><link>/blog/triggering-github-actions-from-outside-of-github/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/triggering-github-actions-from-outside-of-github/</guid><description>An introduction to using custom repository dispatch events to trigger GitHub Actions from outside of GitHub.
Often, GitHub Actions are configured to trigger in response to common GitHub events, such as pushing a git commit, opening a pull request, or creating a git tag. But how can GitHub Actions workflows be triggered from events outside of GitHub? GitHub&amp;rsquo;s repository_dispatch event offers a solution.
A basic example First, create a .github/workflows/repo_dispatch_example.yml file (the name is arbitrary, though its location and .</description></item><item><title>Go Test Parallelization</title><link>/blog/go-test-parallelization/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/go-test-parallelization/</guid><description>A brief introduction to using Go&amp;rsquo;s testing package&amp;rsquo;s T.Parallel() to parallelize tests.
Problem Your Go project&amp;rsquo;s tests are slow and run serially. Or perhaps they&amp;rsquo;re not slow, but they run serially and could be faster.
Solution Consider running the test cases in parallel.
Simple non-parallelized example As a starting point, consider a simple non-parallelized test:
package main import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;time&amp;#34; ) func TestSimple(t *testing.T) { testCases := []struct { name string }{{ &amp;#34;1&amp;#34;, }, { &amp;#34;2&amp;#34;, }, { &amp;#34;3&amp;#34;, }, { &amp;#34;4&amp;#34;, }, { &amp;#34;5&amp;#34;, }} t.</description></item><item><title>Terraform Plan Validation With Open Policy Agent</title><link>/blog/terraform-plan-validation-with-open-policy-agent/</link><pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate><guid>/blog/terraform-plan-validation-with-open-policy-agent/</guid><description>A pattern for automating Terraform plan analysis using Open Policy Agent.
Problem Your project&amp;rsquo;s CI/CD pipeline performs a Terraform plan prior to executing a Terraform apply. The CI/CD pipeline gates on the Terraform plan, such that team members can manually review its output for unwanted, problematic, and/or destructive resource modifications. While the manual plan review helps protect against the application of changes that could negatively impact systems&amp;rsquo; availability, the analysis is tedious and error prone.</description></item><item><title>Using Terraform workspaces</title><link>/blog/using-terraform-workspaces/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/using-terraform-workspaces/</guid><description>Problem: In distributed software engineering, it&amp;rsquo;s common to maintain multiple named environments, each of which is a distinct, logical grouping of infrastructure resources. For example, utilizing separate production and pre-production environments (staging, development, etc.) is a traditional multi-tiered environment strategy in structuring a phased software build, test, and release lifecycle (or even a phased approach in deploying the software infrastructure itself).
But how can a single Terraform configuration be used to safely manage infrastructure resources spanning multiple parallel environments?</description></item><item><title>An Intro to Unix File Permissions</title><link>/blog/an-intro-to-unix-file-permissions/</link><pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/an-intro-to-unix-file-permissions/</guid><description>Unix file permissions can be strange and confusing. This is a basic introduction and cheat sheet.
ls -l file.txt shows you file.txt&amp;rsquo;s permissions, among other things:
-rw-r--r-- 1 mike staff 0 Nov 1 20:09 file.txt But what does this stuff mean?
The file name &amp;ndash; file.txt &amp;ndash; is reported on the far right. To its left, ls reports the date and time when file.txt was last modified: Nov 1 20:09. To the left of this, file.</description></item><item><title>Go Concurrency With Goroutines and Channels</title><link>/blog/go-concurrency-with-goroutines-and-channels/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/go-concurrency-with-goroutines-and-channels/</guid><description>Some introductory notes on Go concurrency, goroutines, and channels, largely serving as a slightly-more-indepth supplement to a brief 2018 overview and example.
Goroutines Normally, calling a function — foo(), for example — is a blocking operation. This means that program execution waits for it to finish before proceeding.
However, invoking a function with the go keyword — go foo(), for example — is non-blocking. When invoked as go foo(), Go runs foo() as a separate task managed by Go.</description></item><item><title>HTTP Middleware in Go with httptest.ResponseRecorder</title><link>/blog/http-middleware-in-go-with-httptest.responserecorder/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/http-middleware-in-go-with-httptest.responserecorder/</guid><description>A technique for creating &amp;ldquo;post-process&amp;rdquo; HTTP middleware in Go.
Problem You need to add a bit of extra &amp;ldquo;post-process&amp;rdquo; functionality or logic beyond what an existing http.Handler offers, but don&amp;rsquo;t have the ability to modify the existing handler, perhaps because it&amp;rsquo;s provided by a third party package. For example, how might you add an HTTP response header to the handler&amp;rsquo;s HTTP response before the response is sent to the client?</description></item><item><title>A systemd Cheat Sheet</title><link>/blog/a-systemd-cheat-sheet/</link><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate><guid>/blog/a-systemd-cheat-sheet/</guid><description>Generally, systemd is the standard init system across Linux distributions. systemctl is its central CLI management tool. This is a brief overview and cheat sheet.
Background systemd is responsible for initializing and managing components, services, and daemons that must be started after the kernel is booted. Such components are often referred to as &amp;ldquo;userland&amp;rdquo; components. resources managed by systemd are called units; these are defined in unit files service management unit files are suffixed with a .</description></item><item><title>Testing Ansible Roles With Docker-in-Docker</title><link>/blog/testing-ansible-roles-with-docker-in-docker/</link><pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/testing-ansible-roles-with-docker-in-docker/</guid><description>A brief guide and reference example explaining a technique for using Molecule and a Docker-in-Docker dev/test environment to test Ansible roles.
Problem Ansible encourages the use of Molecule to test Ansible roles &amp;ldquo;against multiple instances, operating systems and distributions, virtualization providers, test frameworks, and testing scenarios.&amp;rdquo; Molecule documentation offers an overview of how to get started, including how to use Docker as the test driver provider, as well as how to use Ansible as the Molecule verifier.</description></item><item><title>How to Make a Concourse Resource Type</title><link>/blog/how-to-make-a-concourse-resource-type/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><guid>/blog/how-to-make-a-concourse-resource-type/</guid><description>My notes and thoughts on Concourse resource types and when and how to build and test your own resource types.
Context and background Resources are a core concept in Concourse CI/CD pipelines. A resource is any entity that Concourse can check for new versions, fetch at a specific version, and/or push up changes to idempotently create new versions. In this sense, a resource &amp;ldquo;version&amp;rdquo; is a specific form of a resource that differs from earlier forms, such as a particular commit on a git repository or a particular build artifact object in an AWS S3 bucket.</description></item><item><title>Channels in Go</title><link>/blog/channels-in-go/</link><pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate><guid>/blog/channels-in-go/</guid><description>Through goroutines and channels, Go offers constructs for concurrent programming. A goroutine is a concurrent function execution, while a channel offers a communication mechanism through which one goroutine can pass values of a specific type to another goroutine.
For example, the following code performs three HTTP requests concurrently, reports back the request URL, the request response time, and its HTTP response status code for each request, and also the total time spent executing the program.</description></item><item><title>Committing Via the Concourse Git Resource</title><link>/blog/committing-via-the-concourse-git-resource/</link><pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate><guid>/blog/committing-via-the-concourse-git-resource/</guid><description>A Concourse resource is any entity that can be checked for new versions, fetched at a specific version, and/or pushed up to idempotently create new versions. Concourse&amp;rsquo;s built-in git-resource is a Concourse resource for working with git repositories.
Pulling down a git repository for use in a pipeline job using the git-resource is fairly straight forward:
resources: - name: my-repo type: git source: branch: master uri: https://github.com/my-org/my-repo.git uername: git password: ((github-access-token)) jobs: - name: git-log plan: - get: my-repo - task: show-log config: inputs: - name: my-repo platform: linux image_resource: type: registry-image source: repository: node tag: 6.</description></item><item><title>Serialize Empty Structs to JSON in Go</title><link>/blog/serialize-empty-structs-to-json-in-go/</link><pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate><guid>/blog/serialize-empty-structs-to-json-in-go/</guid><description>Problem: How can a Golang struct be serialized to JSON without including an empty object representing an empty struct within the parent struct?
For example, given a MyStruct struct such as the following:
type MyStruct struct { Data MyData `json:&amp;#34;data,omitempty&amp;#34;` Status string `json:&amp;#34;status,omitempty&amp;#34;` } And a str instance of MyStruct marshal&amp;rsquo;d to JSON:
str := &amp;amp;MyStruct{ Status: &amp;#34;some-status&amp;#34; } j, _ := json.Marshal(str) Println(string(j)) The yielded JSON contains an empty &amp;quot;data&amp;quot;: {}, which may be problematic, depending on usage:</description></item><item><title>31 West Philly Illustrations</title><link>/projects/31-west-philly-illustrations/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>/projects/31-west-philly-illustrations/</guid><description>For Artclash’s 2017 West Philadelphia Fun-a-Day show, I drew 31 West Philadelphia-inspired illustrations, one each day through the month of January.</description></item><item><title>Using the ConcourseCI pull request resource to verify Docker builds</title><link>/blog/using-the-concourseci-pull-request-resource-to-verify-docker-builds/</link><pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate><guid>/blog/using-the-concourseci-pull-request-resource-to-verify-docker-builds/</guid><description>Concourse.ci offers a free, open source continuous integration and delivery tool through which software development teams can establish and manage delivery pipelines.
Problem: TravisCI can be configured to run CI against a docker image&amp;rsquo;s source code repository. But how can Concourse&amp;rsquo;s pull-request resource be configured to test that docker build of a Dockerfile works as expected in a repo that houses such a Dockerfile?
Solution: Configure the Concourse&amp;rsquo;s pull request verification job to use the docker-image resource type, thus performing a docker build using the Dockerfile during a pull request&amp;rsquo;s continuous integration.</description></item><item><title>Using OptionParser in Rake</title><link>/blog/using-optionparser-in-rake/</link><pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate><guid>/blog/using-optionparser-in-rake/</guid><description>Problem: you&amp;rsquo;d like to leverage named arguments in your Ruby Rake task.
Solution: use OptionParser to parse the named arguments. Note the need to also call #OptionParser#order!(ARGV), which is often absent from internet documentation.
This example uses Ruby 2.2.2 and Rake 11.1.2.
require &amp;#39;optparse&amp;#39; task :hello do options = { name: &amp;#39;world&amp;#39; } o = OptionParser.new o.banner = &amp;#34;Usage: rake hello [options]&amp;#34; o.on(&amp;#39;-n NAME&amp;#39;, &amp;#39;--name NAME&amp;#39;) { |name| options[:name] = name } # return `ARGV` with the intended arguments args = o.</description></item><item><title>Using wget over Ansible's get_url</title><link>/blog/using-wget-over-ansibles-get_url/</link><pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate><guid>/blog/using-wget-over-ansibles-get_url/</guid><description>Problem: In provisioning a server, your Ansible playbook needs to download files from a URL behinded authentication, such as a private GitHub repository. In Ansible 2.0, Ansible&amp;rsquo;s get_url supports custom headers — such as Authorization — but pre-2.0 Ansible does not.
Solution: Use wget, a wgetrc, and ansible-vault.
Step 1: Generate a GitHub access token
Step 2: Store the token in an Ansible group_var at your_playbook_dir/group_vars/all:
github_token: &amp;#34;your access token value&amp;#34; Step 3: Use ansible-vault to encrypt your github_token; enter a password at the prompt:</description></item><item><title>Apache Persistent Connection Problems</title><link>/blog/apache-persistent-connection-problems/</link><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>/blog/apache-persistent-connection-problems/</guid><description>Problem: Apache worker thread pool is exhausted; server CPU consumption is high.
Solution: reduce the Apache KeepAliveTimeout from its 15 second default (disclaimer: maybe, depending on circumstances).
Background HTTP keep-alive functionality seeks to improve efficiency. In effect, HTTP keep-alive — also referred to as HTTP persistent connection and HTTP connection reuse allows the use of a single TCP connection to send and receive multiple HTTP requests and responses.
Keep-alive reduces the latency associated with opening a new TCP connection for each HTTP request.</description></item><item><title>Secure Session Cookie in Rails over HTTPS</title><link>/blog/secure-session-cookie-in-rails-over-https/</link><pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate><guid>/blog/secure-session-cookie-in-rails-over-https/</guid><description>The secure flag can be set by an application server when sending a cookie within an HTTP response. By setting the secure flag, an HTTP client — such as a web browser — prevents cookie transmission unless the response is securely encrypted over HTTPS.
However, many web applications redirect http:// to https://, and many Ruby on Rails applications are fronted by a web server such as Ngnix or Apache. Often, HTTPS is terminated at the Nginx/Apache layer.</description></item><item><title>How to Test Google Polymer elements on Travis CI</title><link>/blog/how-to-test-google-polymer-elements-on-travis-ci/</link><pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate><guid>/blog/how-to-test-google-polymer-elements-on-travis-ci/</guid><description>Problem: how do you design a cloud-based continuous integration pipeline if your automated application tests relies on technology that requires a GUI, or an actual web browser? Google Polymer heavily leverages Shadow DOM, a feature that&amp;rsquo;s not currently supported in headless JavaScript environments like PhantomJS. My polymer-testing-box demonstrate how to run such tests via Xvfb on a headless Ubuntu VM. Can this technique be used on Travis CI?
Travis CI supports Xvfb and Firefox.</description></item><item><title>JSConf 2015: Headless Testing Against Real Web Browsers</title><link>/blog/jsconf-2015-headless-testing-against-real-web-browsers/</link><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>/blog/jsconf-2015-headless-testing-against-real-web-browsers/</guid><description>I spoke at JSConf 2015 about how to test Google Polymer web components against real web browsers in a headless Linux using Xvfb.
My talk offered background on my philosophy, why some software requires tests be run against a real GUI, and also covered a basic introduction to Xvfb, or X Virtual Frame Buffer. I also demo&amp;rsquo;d polymer-testing-box, a basic reference implementation illustrating how to provision an Ubuntu VM with all the prerequisites necessary to headlessly run Google Polymer web-component-tester tests against Chrome and Firefox.</description></item><item><title>NW.js Chromium data-path</title><link>/blog/nw.js-chromium-data-path/</link><pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate><guid>/blog/nw.js-chromium-data-path/</guid><description>NW.js (formerly node-webkit) offers a platform through which desktop applications can be authored using Node.js and web technologies, like Chromium.
Problem:
But how can it be ensured that user data doesn&amp;rsquo;t persist between fresh installations of a NW.js application? For example, consider the following:
user installs SOME_NW_APP. SOME_NW_APP leverages cookies and local storage. NW.js writes the cookies/local storage data to ~/Library/Application\ Support/SOME_NW_APP on Mac OS and C:\Users\%USERNAME%\AppData\Local\Chromium\User Data\Default on Windows 8.</description></item><item><title>Creating a Windows Installer for a node-webkit App on Mac OS</title><link>/blog/creating-a-windows-installer-for-a-node-webkit-app-on-mac-os/</link><pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate><guid>/blog/creating-a-windows-installer-for-a-node-webkit-app-on-mac-os/</guid><description>node-webkit provides a powerful path through which Linux, Windows, and Mac OS desktop applications can be authored using HTML5 and Node.js web technologies. grunt-node-webkit-builder offers a tool through which a node-webkit application can be compiled to distributable directories. But how can an automated build process bundle the MS Windows files in an application installer in a headless continuous integration environment, or from the command line?
makensis provides a solution. The tool can be used on Linux, though this overview focuses on Mac OS.</description></item><item><title>Hopscotch Coffee Illustration</title><link>/projects/hopscotch-coffee-illustration/</link><pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate><guid>/projects/hopscotch-coffee-illustration/</guid><description>18&amp;quot; x 24&amp;quot; micron pen drawing for Hopscotch Coffee&amp;rsquo;s Bloomington, IN shop.</description></item><item><title>All CSS Modal Dialogs</title><link>/blog/all-css-modal-dialogs/</link><pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate><guid>/blog/all-css-modal-dialogs/</guid><description>A simple technique for creating modal dialogs without the need for JavaScript.
The HTML:
&amp;lt;a href=&amp;#34;#modal-1&amp;#34;&amp;gt;Modal dialog opener&amp;lt;/a&amp;gt; &amp;lt;div class=&amp;#34;modal&amp;#34; id=&amp;#34;modal-1&amp;#34;&amp;gt; &amp;lt;div class=&amp;#39;modal-content&amp;#39;&amp;gt; &amp;lt;a class=&amp;#34;close&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;close&amp;lt;/a&amp;gt; &amp;lt;h2&amp;gt;Some Heading&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;Some paragraph&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; The CSS:
.modal { position: fixed; top: 0; right: 0; bottom: 0; left: 0; background: rgba(0,0,0,0.7); z-index: 99999; opacity: 0; -webkit-transition-property: opacity; -moz-transition-property: opacity; -o-transition-property: opacity; transition-property: opacity; -webkit-transition-duration: 400ms; -moz-transition-duration: 400ms; -o-transition-duration: 400ms; transition-duration: 400ms; -webkit-transition-timing-function: ease-in; -moz-transition-timing-function: ease-in; -o-transition-timing-function: ease-in; transition-timing-function: ease-in; pointer-events: none; } .</description></item><item><title>TimesGrapher</title><link>/projects/timesgrapher/</link><pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate><guid>/projects/timesgrapher/</guid><description>TimesGrapher seeks to shed light on what topics are covered by the New York Times from year-to-year. The simple application leverages the New York Times API to visualize the differences in coverage offered to any two topics in any year between 1981 and 2013, in effect providing insight on the year-to-year relevancy of current events, as well as arguable editorial bias.
The application is built with Rails and Backbone.js.
TimesGrapher was built as a hobby project; it is not affiliated with the New York Times.</description></item><item><title>Rails API Integration Tests</title><link>/blog/rails-api-integration-tests/</link><pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate><guid>/blog/rails-api-integration-tests/</guid><description>A web-services-oriented architecture encourages the development of multiple, modular applications over maintaining a single large, all-in-one monolithic piece of software. Often, the web services paradigm involves the development of clients apps that rely upon third party RESTful web services. Labor and responsibilities are divided and conquered across smaller, more manageable codebases and teams. But how can such a client application verify graceful integration? With a large user-base, such insight is increasingly critical.</description></item><item><title>A Simple Ruby Class Example</title><link>/blog/a-simple-ruby-class-example/</link><pubDate>Sun, 30 Mar 2014 00:00:00 +0000</pubDate><guid>/blog/a-simple-ruby-class-example/</guid><description>Some colleagues asked about basic Ruby examples. The following RemoteConfig class makes an HTTP request and provides an object-oriented interface to XML served at the URL requested. The class serves as simple intro to some common needs and Ruby-oriented language features:
dynamic method definition performing GET requests over HTTPS creating a basic, object-oriented interface parsing attribute-heavy XML with XPATH queries testing with Rspec and Webmock The XML Assume the following XML is hosted at https://somedomain.</description></item><item><title>Automated Tests: What, Why, How?</title><link>/blog/automated-tests-what-why-how/</link><pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate><guid>/blog/automated-tests-what-why-how/</guid><description>In recent years, automated testing has gained significant traction as a software development best practice. But not everyone&amp;rsquo;s sold or fully understands where to begin in developing such tests.
Some teams fear test-writing may impact velocity. Some believe an ill-designed, legacy codebase makes such tests impossible. Others don&amp;rsquo;t fully grasp the benefits. And others simply don&amp;rsquo;t know where to begin.
I&amp;rsquo;m frequently asked about automated testing — managers, product owners, UX designers, junior developers, and the uninitiated want to know: Why write tests?</description></item><item><title>wp2middleman</title><link>/projects/wp2middleman/</link><pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate><guid>/projects/wp2middleman/</guid><description>wp2middleman is a Ruby gem that migrates the Wordpress posts in a Wordpress XML export file to middleman-style markdown files.
wp2middleman provides a wp2mm commandline executable, as well as a WP2Middleman module.
View source and documentation on Github »</description></item><item><title>31 Dream Homes</title><link>/projects/31-dream-homes/</link><pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate><guid>/projects/31-dream-homes/</guid><description>For Artclash’s 2012 West Philadelphia Fun-a-Day show, I drew 31 dream homes, one each day through the month of January.</description></item><item><title>Lobber</title><link>/projects/lobber/</link><pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate><guid>/projects/lobber/</guid><description>Lobber is a simple command line utility used to quickly upload a directory to Amazon S3.
Lobber is built with Ruby and can be downloaded from Rubygems.
View its source code on GitHub »</description></item><item><title>Philadelphia Police Advisory Commission Complaint Map</title><link>/projects/philadelphia-police-advisory-commission-complaint-map/</link><pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate><guid>/projects/philadelphia-police-advisory-commission-complaint-map/</guid><description>My map of 2009 – 2012 complaints filed with the Philadelphia Police Advisory Commission won first place at the 2013 Barcamp News Innovation Hackathon.
The map plots the details surrounding complaints filed with the Police Advisory Commission by citizens against Philadelphia Police Officers. Its data is published by Open Data Philly and has been imported to a public Google Spreadsheet. According to Open Data Philly, the data comes directly from the Police Advisory Commission Complaint Database.</description></item><item><title>Nicar 2013 Conference</title><link>/blog/nicar-2013-conference/</link><pubDate>Mon, 04 Mar 2013 00:00:00 +0000</pubDate><guid>/blog/nicar-2013-conference/</guid><description>On February 27 – March 2, I attended NICAR 2013 in Louisville, Kentucky. My attendance was generously funded through a Temple University Center for Public Interest Journalism sponsorship.
What is NICAR? NICAR is the National Institute for Computer-Assisted Reporting, a program of Investigative Reporters and Editors, Inc. and the Missouri School of Journalism. In the institute’s own words, “NICAR has trained thousands of journalists in the practical skills of finding, prying loose and analyzing electronic information.</description></item><item><title>Using Google Spreadsheets and Tabletop.js as a Web Application Back-end</title><link>/blog/using-google-spreadsheets-and-tabletop.js-as-a-web-application-back-end/</link><pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate><guid>/blog/using-google-spreadsheets-and-tabletop.js-as-a-web-application-back-end/</guid><description>At NICAR 2013, Tasneem Raja spoke on Smarter interactive Web projects with Google Spreadsheets and Tabletop.js. Tasneem is Mother Jones‘s Interactive Editor; she outlined how Mother Jones uses Google Spreadsheets to power some of its interactive features.
Beyond serving as a simple, easy-to-maintain datastore and CMS, Google Spreadsheets — used in concert with Tabletop.js — allows for the creation of dynamic web content in absence of server-side processing, in effect empowering a highly scalable and simple architecture.</description></item><item><title>Streamlined Rails Gem Updates on Gem in a Box</title><link>/blog/streamlined-rails-gem-updates-on-gem-in-a-box/</link><pubDate>Mon, 11 Feb 2013 00:00:00 +0000</pubDate><guid>/blog/streamlined-rails-gem-updates-on-gem-in-a-box/</guid><description>Problem: Per recent Ruby on Rails security patches, you need to update your Rails applications. However, because you host Rails and its related gems on a private Gem in a Box gem server, it’s a bit cumbersome to manually download the necessary gems from Rubygems.org, and then upload them to your Gem in a Box gem server.
Solution: bash and curl.
1. List the necessary gems in a gems.txt file:</description></item><item><title>Using the phl_geocode Ruby Gem</title><link>/blog/using-the-phl_geocode-ruby-gem/</link><pubDate>Mon, 17 Dec 2012 00:00:00 +0000</pubDate><guid>/blog/using-the-phl_geocode-ruby-gem/</guid><description>I recently released phl_geocode, a simple Ruby gem which gets latitude and longitude coordinates for a Philadelphia address.
Getting Started Install phl_geocode:
gem install phl_geocode Require phl_geocode:
require &amp;#34;phl_geocode&amp;#34; Instantiate a PHLGeocode instance:
phl = PHLGeocode.new Get latitude/longitude coordinates for a Philadelphia address:
phl.get_coordinates &amp;#34;1500 market street&amp;#34; Example response:
[{ :address =&amp;gt; &amp;#34;1500 MARKET ST&amp;#34;, :similarity =&amp;gt; 100, :latitude =&amp;gt; 39.9521740263203, :longitude =&amp;gt; -75.1661518986459 }, { :address =&amp;gt; &amp;#34;1500S MARKET ST&amp;#34;, :similarity =&amp;gt; 99, :latitude =&amp;gt; 39.</description></item><item><title>Using the civic-info Node.js Module to Get Voter and Election Info</title><link>/blog/using-the-civic-info-node.js-module-to-get-voter-and-election-info/</link><pubDate>Thu, 08 Nov 2012 00:00:00 +0000</pubDate><guid>/blog/using-the-civic-info-node.js-module-to-get-voter-and-election-info/</guid><description>Inspired by election apps like vote, I wrote civic-info.js, a simple Node.js module to interface with Google&amp;#8217;s Civic Info API.
## Getting Started 1. Secure a Google API key. 2. Install civic-info:
npm install civic-info 3. Require and instantiate civic-info with your Google API key:
var civicInfo = require(&amp;#34;civic-info&amp;#34;)({apiKey: &amp;#34;YOUR KEY&amp;#34;}); Alteratively, you can set a GOOGLE_API_KEY environment variable and instantiate like so:
var civicInfo = require(&amp;#34;civic-info&amp;#34;)(); Examples Get election info and election IDs:</description></item><item><title>Deploying an Express App to Heroku</title><link>/blog/deploying-an-express-app-to-heroku/</link><pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate><guid>/blog/deploying-an-express-app-to-heroku/</guid><description>Some coworkers expressed interest in deploying Express apps to Heroku. These instructions seek to provide a basic overview, though Heroku offers much more robust documentation in its dev center.
Step 1: Create a Heroku account.
Step 2: Install the Heroku Toolbelt, which includes the Heroku command line client, Git, and Foreman.
Step 3: Log in by entering the following in the command line:
heroku login Step 4: Install Node.js.
Step 5: Create an Express app.</description></item><item><title>Testing Node.js with Mocha, Expect.js, and Nock</title><link>/blog/testing-node.js-with-mocha-expect.js-and-nock/</link><pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate><guid>/blog/testing-node.js-with-mocha-expect.js-and-nock/</guid><description>Problem: Your Node.js code uses request or http to make http requests to URLs. You don’t want to make actual http calls, nor do you want to test request and/or http. How can you test that your code works as intended and interfaces properly with request and http?
Solution: Use nock. For the purposes of this example, I’ll also demonstrate how nock works in concert with mocha and expect.js.
Your node module // Let&amp;#39;s call this file/module flickr-feeder.</description></item><item><title>Icon Sprites with Compass</title><link>/blog/icon-sprites-with-compass/</link><pubDate>Wed, 10 Oct 2012 00:00:00 +0000</pubDate><guid>/blog/icon-sprites-with-compass/</guid><description>Manually creating sprite images is time-consuming and subject to human error. The corresponding CSS is often verbose and largely repetitive.
Solution: Leverage Compass&amp;rsquo;s spriting and looping features.
Example: You have an icon set of 20 10x10px individual .png files. Their file names follow the convention icon_1.png, icon_2.png, and icon_3.png through icon_20.png.
Step 1: Install compass gem install compass Step 2: Create a compass project compass create your_project_name Step 3: Configure compass spriting In the case of the aforementioned, example, you’ll want to configure compass to build a sprite from the directory containing the icons.</description></item><item><title>Using Mocha to Test a Node.js Server</title><link>/blog/using-mocha-to-test-a-node.js-server/</link><pubDate>Wed, 15 Aug 2012 00:00:00 +0000</pubDate><guid>/blog/using-mocha-to-test-a-node.js-server/</guid><description>How do you write Mocha tests against a Node.js server and run the tests during development, presumably while your server is already running?
Solution: Leverage fork to run the server code as a child process of the Mocha test. The following is a quick example of what this could look like.
The Server Code Let&amp;rsquo;s assume this code lives in your-project/server.js.
var http = require(&amp;#39;http&amp;#39;); var util = require(&amp;#39;util&amp;#39;); var port = process.</description></item><item><title>Collecting Basic Team and Sprint Metrics with Git</title><link>/blog/collecting-basic-team-and-sprint-metrics-with-git/</link><pubDate>Sat, 11 Aug 2012 00:00:00 +0000</pubDate><guid>/blog/collecting-basic-team-and-sprint-metrics-with-git/</guid><description>Per recent co-worker interest in metrics surrounding team performance, the following offer a few simple techniques for extracting team-health-oriented metrics from a git repository. Note that these are just a few basic solutions which require minimal tooling. Many alternative and more-developed solutions exist too.
##View the Total Number of Commits Per Developer within the Codebase
git shortlog -sne View the Total Number of Commits Per Developer Within a Sprint This example assumes that the sprint began on July 1st and ended July 14th.</description></item><item><title>Gull</title><link>/projects/gull/</link><pubDate>Mon, 06 Aug 2012 00:00:00 +0000</pubDate><guid>/projects/gull/</guid><description>A set of images for use by Nate Rappole as a postcard series.</description></item><item><title>Setting Up Postgres on Mac OSX with Homebrew</title><link>/blog/setting-up-postgres-on-mac-osx-with-homebrew/</link><pubDate>Sun, 29 Jul 2012 00:00:00 +0000</pubDate><guid>/blog/setting-up-postgres-on-mac-osx-with-homebrew/</guid><description>I ran into some challenges installing postgres via homebrew. I attempted to follow these instruction, as is advised by the postgres website but ran into further problems. The following steps outline how I was able to finally work around the problems. Note that I&amp;rsquo;m using Mac OSX 10.6.8.
Uninstall old versions of postgres:
brew rm postgresql --force Update homebrew:
brew update Install postgres:
brew install postgresql Make a postgres directory:</description></item><item><title>Fluent 2012 Notes: Nicholas Zakas on Maintainable JavaScript</title><link>/blog/fluent-2012-notes-nicholas-zakas-on-maintainable-javascript/</link><pubDate>Thu, 31 May 2012 00:00:00 +0000</pubDate><guid>/blog/fluent-2012-notes-nicholas-zakas-on-maintainable-javascript/</guid><description>My notes from Nicholas Zakas&amp;rsquo;s 2012 Fluent talk on Maintainable JavaScript.
The primary features of maintainable code:
works for at least 5 years without major changes intuitive understandable adaptable - developers must be able to change without breaking completely extendable - the code can be built upon to do more than was originally intended debuggable - developers should be able to easily identify the source of problems testable - code that can be validated with unit tests saves time and ensures quality Maintainability requires coordination.</description></item><item><title>Deploying Wordpress to Pagodabox</title><link>/blog/deploying-wordpress-to-pagodabox/</link><pubDate>Sat, 24 Mar 2012 00:00:00 +0000</pubDate><guid>/blog/deploying-wordpress-to-pagodabox/</guid><description>Services such as Heroku provide cloud deployment options for Rails, Sinatra, Django, and Node.js applications, but what about Wordpress? Pagodabox seems promising. Here&amp;rsquo;s how to set up a Wordpress Pagodabox deployment workflow.
Note that these instructions are purposefully verbose in an effort to help those for whom such a workflow may be new and intimidating. Also note that these instructions assume you&amp;rsquo;re using a Mac.
Set up a local instance of Wordpress using MAMP There&amp;rsquo;s probably a fun way to do this with Vagrant, but MAMP will serve our purposes here.</description></item><item><title>Lobbying.ph</title><link>/blog/lobbying.ph/</link><pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate><guid>/blog/lobbying.ph/</guid><description>Update: Casey Thomas migrated the original Lobbing.ph to Django and extended its functionality.
Casey Thomas, Dan Freiman, Adam Hinz, and I build Lobbying.ph as an entry in Code for America&amp;rsquo;s 2012 Civic Hackathon in Philadelphia. The project won first place.
Completed in about 5 hours, Lobbying.ph seeks to help Philadelphians access information about local lobbying efforts. As is reported on the site:
&amp;ldquo;Beginning in 2012, lobbyists and those paying for lobbyists in Philadelphia are required to register and file quarterly reports of their expenses with the City of Philadelphia Board of Ethics.</description></item><item><title>Using South on a Heroku-hosted Django Project</title><link>/blog/using-south-on-a-heroku-hosted-django-project/</link><pubDate>Sat, 18 Feb 2012 00:00:00 +0000</pubDate><guid>/blog/using-south-on-a-heroku-hosted-django-project/</guid><description>Problem: You need to add new fields to the admin of a Django project hosted on Heroku but don&amp;rsquo;t want to destroy data by running syncdb on your Heroku-hosted database.
Solution: South.
These instructions assume you&amp;rsquo;re working in a clean checkout of a Heroku project named heroku_project, which contains a Django project named django_project, which contains an app named django_app. You need to add a new admin field to django_app.</description></item><item><title>TEDxPhilly</title><link>/projects/tedxphilly/</link><pubDate>Fri, 09 Sep 2011 00:00:00 +0000</pubDate><guid>/projects/tedxphilly/</guid><description>The organizers of TEDxPhilly contacted me to create a seam-less, infinitely tiling illustration to be used as a background image throughout the conference’s web collateral. The illustration is type-based and inspired by “the city,” the 2011 conference theme.</description></item><item><title>Basic Command Line Tools</title><link>/blog/basic-command-line-tools/</link><pubDate>Tue, 30 Aug 2011 00:00:00 +0000</pubDate><guid>/blog/basic-command-line-tools/</guid><description>A co-worker expressed interest in learning more Unix command line operations. This collection seeks to supplement his basic knowledge with some additional tips and tools.
Searching Source Code ack can be downloaded at betterthangrep.com and is a great, free tool for searching a project’s source code. Usage: ack string will return the relative paths to all the files containing the matched string, the line on which the string is found with the match highlighted, and the line number on which the match lives, all while ignoring those files contained within .</description></item><item><title>How to Contribute to a Project on GitHub</title><link>/blog/how-to-contribute-to-a-project-on-github/</link><pubDate>Tue, 23 Aug 2011 00:00:00 +0000</pubDate><guid>/blog/how-to-contribute-to-a-project-on-github/</guid><description>A quick how-to in contributing to an open source project hosted on GitHub. These instructions assume you&amp;rsquo;ve already created a GitHub account and properly set up your machine. For more details, GitHub also publishes similar instructions.
Set Up Your Repository Fork a project by visiting its URL on GitHub and clicking the &amp;ldquo;Fork&amp;rdquo; button
Clone your fork to your local machine:
git clone git@github.com:yourUsername/project-name.git Assign the original repository to a remote called &amp;ldquo;upstream&amp;rdquo; to retrieve updates from the original repository you forked:</description></item><item><title>CSS3: An All-CSS, Image-less Play Button</title><link>/blog/css3-an-all-css-image-less-play-button/</link><pubDate>Sat, 16 Jul 2011 00:00:00 +0000</pubDate><guid>/blog/css3-an-all-css-image-less-play-button/</guid><description>The HTML &amp;lt;a class=&amp;#34;thumb&amp;#34; href=&amp;#34;/some-url&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;some-image.jpg&amp;#34; alt=&amp;#34;Image&amp;#34; /&amp;gt; &amp;lt;b class=&amp;#34;play&amp;#34;&amp;gt; &amp;lt;i class=&amp;#34;wave&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;i class=&amp;#34;arrow&amp;#34;&amp;gt;Play now&amp;lt;/i&amp;gt; &amp;lt;/b&amp;gt; &amp;lt;/a&amp;gt; The CSS /* the anchor tag containing everything */ a.thumb { position:relative; width:300px; height:225px; display:block; } /* the black box */ b.play { display:block; position:absolute; width:80px; height:75px; bottom:0; right:0; background:#1a1a1a; text-indent:-5000px; overflow:hidden; } /* the arrow&amp;#39;s container */ i.arrow { display: block; width: 40px; height: 45px; overflow:hidden; position:relative; margin:-30px 0 0 25px; } /* the arrow */ i.</description></item><item><title>CSS3: Using Transform to Make a Cube</title><link>/blog/css3-using-transform-to-make-a-cube/</link><pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate><guid>/blog/css3-using-transform-to-make-a-cube/</guid><description>CSS transforms! The following works in IE9 and above, as well as modern versions of Firefox, Safari, Chrome, and Opera. There&amp;rsquo;s probably a trickier way this could be done with less markup, leveraging the :before and :after pseudo classes.
The HTML &amp;lt;div class=&amp;#34;cube&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;cube-side top&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;cube-side left&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;cube-side right&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; The CSS /* a container div */ div.cube { position:relative; width:200px; height:220px; } /* styles for all the cube&amp;#39;s sides (top, left, and right) */ div.</description></item><item><title>How to Make Testable Private Methods in JavaScript</title><link>/blog/how-to-make-testable-private-methods-in-javascript/</link><pubDate>Wed, 11 May 2011 00:00:00 +0000</pubDate><guid>/blog/how-to-make-testable-private-methods-in-javascript/</guid><description>Problem: how to write unit tests for private functions?
As my co-worker Trevor suggests in more detail, one solution is to create a class with 3 internal objects:
settings: this object houses configuration options, such as a debug option private: this object houses private functions public: this object houses all public functions Then, in writing unit tests, a developer can instantiate the class by passing {debug: true} to adjust the class&amp;rsquo;s settings such that the private and public objects are merged, in effect exposing the previously private functions housed in the private object.</description></item><item><title>JavaScript Design Patterns</title><link>/blog/javascript-design-patterns/</link><pubDate>Sat, 19 Mar 2011 00:00:00 +0000</pubDate><guid>/blog/javascript-design-patterns/</guid><description>Addy Osmani offers Essential JavaScript &amp;amp; jQuery Design Patterns For Beginners as a free guide to some solutions &amp;ldquo;that can be applied to commonly occurring problems&amp;rdquo; throughout JavaScript. Here are a few of my notes on Osmani’s book, mostly for my own reference:
The Creational Pattern used in creating objects within in application define a class and instantiate it later when you need it var newObject = new MyClass(); The Constructor Function used to create specific types of objects native constructors in JavaScript include Array and Object constructor functions often capitalized to distinguish them from normal functions function Car(model, year, miles){ this.</description></item><item><title>Simplified Find/Replace from the Command Line</title><link>/blog/simplified-find/replace-from-the-command-line/</link><pubDate>Thu, 03 Feb 2011 00:00:00 +0000</pubDate><guid>/blog/simplified-find/replace-from-the-command-line/</guid><description>I recently needed to change all instances of the text /layout/ to /layout_xds/ in a large collection of css files housed throughout multiple levels of subdirectories.
To deal with the problem, I created a bash function to serve as a shortcut wrapping my usage of grep, sed, and uniq. Note that I’m using Mac OS X 10.6.6.
function rep() { for i in `grep -R --exclude=&amp;#34;*.svn*&amp;#34; &amp;#34;$1&amp;#34; * | sed s/:.</description></item><item><title>How to Exclude Files from SVN Commits</title><link>/blog/how-to-exclude-files-from-svn-commits/</link><pubDate>Thu, 09 Dec 2010 00:00:00 +0000</pubDate><guid>/blog/how-to-exclude-files-from-svn-commits/</guid><description>In Subversion, svn commit will commit all edited files to the central repository. In the event that I want to selectively commit only a few of my edited files, it&amp;rsquo;s necessary to specify the full path to each file with svn commit /full/path/to/filename1 /full/path/to/filename2 /full/path/to/filename3. This can be time-consuming. Plus, it&amp;rsquo;s often easier to selectively exclude files from a given commit, but Subversion doesn&amp;rsquo;t offer this feature.
The solution I made a bash function that provides a quick way to include/exclude files from an svn commit.</description></item><item><title>Basic Overview of the Surround Plugin for Vim</title><link>/blog/basic-overview-of-the-surround-plugin-for-vim/</link><pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate><guid>/blog/basic-overview-of-the-surround-plugin-for-vim/</guid><description>Surround is a useful Vim plugin when hand-editing HTML or XML. The plugin can be downloaded via Github or the Vim website and installed by copying the /plugin/surround.vim file to your ~/.vim/plugin/ directory. A few of its basic commands are as follows. Note that each command is entered from within the text to be surrounded:
Adding Surroundings Generally, the cs or ys commands can be used to add surroundings.
Add Surrounding &amp;lt;tag&amp;gt; or Puncation to Word:</description></item><item><title>Our Philadelphia</title><link>/projects/our-philadelphia/</link><pubDate>Fri, 23 Apr 2010 00:00:00 +0000</pubDate><guid>/projects/our-philadelphia/</guid><description>I partnered with Gabriel Farrell and Cecily Anderson to design and build ourphiladelphia.org for Common Cause, a nonprofit, nonpartisan citizen’s lobbying organization working to promote open, honest, and accountable government.
Our Philadelphia is a community website designed to provide information to Philadelphians about the role of money in local politics. The site features an address-based representative search tool, a news publishing platform, RSS feeds, user accounts and profiles, as well as an extensive database of local campaign donor information.</description></item><item><title>Quiet Logger: HTML5 WordPress Theme</title><link>/blog/quiet-logger-html5-wordpress-theme/</link><pubDate>Fri, 26 Mar 2010 00:00:00 +0000</pubDate><guid>/blog/quiet-logger-html5-wordpress-theme/</guid><description>Given increasing enthusiasm for HTML5, as well as an interest in light-weight Wordpress themes, I created Quiet Logger, a minimal WordPress theme typeset in Baskerville and coded with HTML5.
Features Semantically sound and valid HTML5 Minimal, clean, and valid CSS 2.1 HTML5 support to versions of Internet Explorer prior to IE 9 provided via Remy Sharp’s HTML5 Shiv A minimal, typographically strong design based on Baskerville Free and licensed under GPL The source code can be forked on GitHub.</description></item><item><title>Hometown Typeface</title><link>/blog/hometown-typeface/</link><pubDate>Fri, 19 Mar 2010 00:00:00 +0000</pubDate><guid>/blog/hometown-typeface/</guid><description>I&amp;rsquo;ve been playing with typeface design. I&amp;rsquo;m calling this one hometown.</description></item><item><title>OurPhiladelphia.org Launched</title><link>/blog/ourphiladelphia.org-launched/</link><pubDate>Sun, 28 Feb 2010 00:00:00 +0000</pubDate><guid>/blog/ourphiladelphia.org-launched/</guid><description>Last month, Gabriel Farrell, Cecily Anderson, and I launched OurPhiladelphia.org for our client, Common Cause, a nonprofit, nonpartisan citizen’s lobbying organization working to promote open, honest, and accountable government. While we plan to enhance and grow its functionality in the future, we hope this initial iteration of the site proves useful in helping Philadelphians access information about local politics. Our goal is to help create an open, honest, and accountable local government that serves the public interest.</description></item><item><title>Battles</title><link>/projects/battles/</link><pubDate>Tue, 23 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/battles/</guid><description>Battles: Sea and Land are two illustration-based narrative zines made in the Summer of 2006.</description></item><item><title>Brainworms</title><link>/projects/brainworms/</link><pubDate>Tue, 23 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/brainworms/</guid><description>T-shirt design.</description></item><item><title>Clap Yr Hands</title><link>/projects/clap-yr-hands/</link><pubDate>Tue, 23 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/clap-yr-hands/</guid><description>Clap Yr Hands is a zine I occasionally publish, usually featuring illustration and collage.</description></item><item><title>free103point9</title><link>/projects/free103point9/</link><pubDate>Tue, 23 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/free103point9/</guid><description>Gabe Farrell and I developed this site for the New York-based transmission arts advocacy organization free103point9.
The site is built on Django. In addition to brochuring free103point9, the site also serves as a transmission arts digital archive, hosts an event calendar, and houses free103′s online radio station.</description></item><item><title>Taylor &amp; Juliette</title><link>/projects/taylor-juliette/</link><pubDate>Tue, 23 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/taylor-juliette/</guid><description>I created a simple brochure website and letter-pressed invite for Taylor &amp;amp; Juliette&amp;rsquo;s wedding. The website and invite feature original illustrations, as well as a hand-drawn typeface created for the wedding materials.</description></item><item><title>Anthroapology</title><link>/projects/anthroapology/</link><pubDate>Mon, 22 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/anthroapology/</guid><description>This quarter-size zine is a collection of illustrations I made while living and teaching English in Bangkok, Thailand in 2005/2006.</description></item><item><title>Polaroid Celluloid</title><link>/projects/polaroid-celluloid/</link><pubDate>Sat, 20 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/polaroid-celluloid/</guid><description>Hand drawn illustration for the zine Polaroid Celluloid.</description></item><item><title>31 Portraits</title><link>/projects/31-portraits/</link><pubDate>Mon, 01 Feb 2010 00:00:00 +0000</pubDate><guid>/projects/31-portraits/</guid><description>For Artclash’s 2010 Fun-a-Day show, I drew 31 portraits, one for each day of the month of January. The illustrations were compiled in Anthrotopography, a small, photocopied zine.</description></item><item><title>31 Patterns</title><link>/projects/31-patterns/</link><pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate><guid>/projects/31-patterns/</guid><description>Nate Johnson, Kara Schlindwein, and I collaborated on this book of 31 illustrated patterns for Artclash’s annual Fun-A-Day art show. We created one pattern each day throughout the month of January 2009 and compiled our finished work in a handmade book. The patterns are designed to tile infinitely.</description></item><item><title>Parcell Press</title><link>/projects/parcell-press/</link><pubDate>Mon, 01 Oct 2007 00:00:00 +0000</pubDate><guid>/projects/parcell-press/</guid><description>I designed and developed the logo, identity, and ecommerce website for Parcell Press, an independent zine, art, and book distributor.</description></item><item><title>Muscle Crap</title><link>/projects/muscle-crap/</link><pubDate>Fri, 01 Oct 2004 00:00:00 +0000</pubDate><guid>/projects/muscle-crap/</guid><description>A few of my illustrations were featured in Muscle Crap, a limited edition artists&amp;rsquo; book published by Salt Tooth Press in 2004.</description></item></channel></rss>