<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>s3 on Mike Ball</title><link>/tags/s3/</link><description>Recent content in s3 on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 25 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/s3/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit Testing AWS S3 Downloads in Go</title><link>/blog/unit-testing-aws-s3-downloads-in-go/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>/blog/unit-testing-aws-s3-downloads-in-go/</guid><description>An example of github.com/aws/aws-sdk-go/awstesting/unit&amp;rsquo;s use.
Problem How do you unit test a Go function that wraps aws-sdk-go&amp;rsquo;s s3manager#Downloader.Download without issuing real HTTP requests to the AWS API (and without using an additional tool like localstack)?
Solution Make the implementation&amp;rsquo;s *s3manager.Downloader configurable; in testing, use the github.com/aws/aws-sdk-go/awstesting/unit package to create a custom *s3manager.Downloader that uses a local testdata directory as a mock AWS S3 bucket.
Example Consider a contrived s3object package. The package provides an S3Object type, which features a Download method that wraps s3manager#Downloader.</description></item></channel></rss>