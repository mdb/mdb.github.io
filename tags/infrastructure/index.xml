<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>infrastructure on Mike Ball</title><link>/tags/infrastructure/</link><description>Recent content in infrastructure on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/infrastructure/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform Provider Development Demystified</title><link>/blog/terraform-provider-development-demystified/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>/blog/terraform-provider-development-demystified/</guid><description>Many Terraform practitioners may be naive to provider development. How are providers implemented?
Review of the basics Terraform At its core, Terraform enables users to describe infrastructure resources &amp;ndash; and their dependency relationships &amp;ndash; in .tf files using HCL.
These HCL-declared infrastructure resources are often associated with cloud infrastructure services, such as AWS, OpenStack, or Kubernetes, but they might also be local files:
resource &amp;#34;digitalocean_droplet&amp;#34; &amp;#34;web&amp;#34; { name = &amp;#34;tf-web&amp;#34; size = &amp;#34;512mb&amp;#34; image = &amp;#34;centos-5-8-x32&amp;#34; region = &amp;#34;sfo1&amp;#34; } resource &amp;#34;dnsimple_record&amp;#34; &amp;#34;hello&amp;#34; { domain = &amp;#34;example.</description></item><item><title>Using Terraform workspaces</title><link>/blog/using-terraform-workspaces/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/using-terraform-workspaces/</guid><description>Problem: In distributed software engineering, it&amp;rsquo;s common to maintain multiple named environments, each of which is a distinct, logical grouping of infrastructure resources. For example, utilizing separate production and pre-production environments (staging, development, etc.) is a traditional multi-tiered environment strategy in structuring a phased software build, test, and release lifecycle (or even a phased approach in deploying the software infrastructure itself). But how can a single Terraform configuration be used to safely manage infrastructure resources spanning multiple parallel environments?</description></item></channel></rss>