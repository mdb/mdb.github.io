<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>node.js on Mike Ball</title><link>http://mikeball.info/tags/node.js/</link><description>Recent content in node.js on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 27 Apr 2013 00:00:00 +0000</lastBuildDate><atom:link href="http://mikeball.info/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Philadelphia Police Advisory Commission Complaint Map</title><link>http://mikeball.info/projects/philadelphia-police-advisory-commission-complaint-map/</link><pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate><guid>http://mikeball.info/projects/philadelphia-police-advisory-commission-complaint-map/</guid><description>My map of 2009 – 2012 complaints filed with the Philadelphia Police Advisory Commission won first place at the 2013 Barcamp News Innovation Hackathon.
The map plots the details surrounding complaints filed with the Police Advisory Commission by citizens against Philadelphia Police Officers. Its data is published by Open Data Philly and has been imported to a public Google Spreadsheet. According to Open Data Philly, the data comes directly from the Police Advisory Commission Complaint Database.</description></item><item><title>Using the civic-info Node.js Module to Get Voter and Election Info</title><link>http://mikeball.info/blog/using-the-civic-info-node.js-module-to-get-voter-and-election-info/</link><pubDate>Thu, 08 Nov 2012 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/using-the-civic-info-node.js-module-to-get-voter-and-election-info/</guid><description>Inspired by election apps like vote, I wrote civic-info.js, a simple Node.js module to interface with Google&amp;#8217;s Civic Info API.
## Getting Started 1. Secure a Google API key. 2. Install civic-info:
npm install civic-info 3. Require and instantiate civic-info with your Google API key:
var civicInfo = require(&amp;#34;civic-info&amp;#34;)({apiKey: &amp;#34;YOUR KEY&amp;#34;}); Alteratively, you can set a GOOGLE_API_KEY environment variable and instantiate like so:
var civicInfo = require(&amp;#34;civic-info&amp;#34;)(); Examples Get election info and election IDs:</description></item><item><title>Deploying an Express App to Heroku</title><link>http://mikeball.info/blog/deploying-an-express-app-to-heroku/</link><pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/deploying-an-express-app-to-heroku/</guid><description>Some coworkers expressed interest in deploying Express apps to Heroku. These instructions seek to provide a basic overview, though Heroku offers much more robust documentation in its dev center.
Step 1: Create a Heroku account.
Step 2: Install the Heroku Toolbelt, which includes the Heroku command line client, Git, and Foreman.
Step 3: Log in by entering the following in the command line:
heroku login Step 4: Install Node.js.
Step 5: Create an Express app.</description></item><item><title>Testing Node.js with Mocha, Expect.js, and Nock</title><link>http://mikeball.info/blog/testing-node.js-with-mocha-expect.js-and-nock/</link><pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/testing-node.js-with-mocha-expect.js-and-nock/</guid><description>Problem: Your Node.js code uses request or http to make http requests to URLs. You don’t want to make actual http calls, nor do you want to test request and/or http. How can you test that your code works as intended and interfaces properly with request and http?
Solution: Use nock. For the purposes of this example, I’ll also demonstrate how nock works in concert with mocha and expect.js.
Your node module // Let&amp;#39;s call this file/module flickr-feeder.</description></item><item><title>Using Mocha to Test a Node.js Server</title><link>http://mikeball.info/blog/using-mocha-to-test-a-node.js-server/</link><pubDate>Wed, 15 Aug 2012 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/using-mocha-to-test-a-node.js-server/</guid><description>How do you write Mocha tests against a Node.js server and run the tests during development, presumably while your server is already running?
Solution: Leverage fork to run the server code as a child process of the Mocha test. The following is a quick example of what this could look like.
The Server Code Let&amp;rsquo;s assume this code lives in your-project/server.js.
var http = require(&amp;#39;http&amp;#39;); var util = require(&amp;#39;util&amp;#39;); var port = process.</description></item></channel></rss>