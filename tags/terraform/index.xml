<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>terraform on Mike Ball</title><link>/tags/terraform/</link><description>Recent content in terraform on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="/tags/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform: self-validating plan-time permissions checks</title><link>/blog/terraform-self-validating-plan-time-permissions-checks/</link><pubDate>Fri, 21 Mar 2025 00:00:00 +0000</pubDate><guid>/blog/terraform-self-validating-plan-time-permissions-checks/</guid><description>Problem Your Terraform module uses the AWS provider. In CI/CD, the plan associated with a GitHub pull request passes. However, after merging the pull request, the full apply fails; the IAM role used by the AWS provider lacks sufficient permissions.
How can you &amp;ldquo;shift left&amp;rdquo; and discover such problems earlier in the CI/CD pipeline at plan time, before a pull request is merged?
Solution Leverage the iam_principal_policy_simulation data source; test whether the utilized IAM role has the necessary access to do its own work.</description></item><item><title>Terraform Patterns: the wrapper module</title><link>/blog/terraform-patterns-the-wrapper-module/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/terraform-patterns-the-wrapper-module/</guid><description>Problem Internal to your organization, you want to provide engineers simplified, higher level abstractions for managing AWS resources via Terraform child modules. You could build such modules in-house, but you&amp;rsquo;re wary of the level of effort required to do so and the resulting maintenance burden, especially considering the existing ecosystem of well-regarded community-maintained open source modules. However, many of the community modules support input variables and usage patterns that are too broad, require too much specialized AWS knowledge, and aren&amp;rsquo;t compliant with your organization&amp;rsquo;s &amp;ldquo;golden path&amp;rdquo; standards, guardrails, and supported patterns.</description></item><item><title>Scalable Terraform Patterns: Reuse and Repeatability</title><link>/blog/scalable-terraform-patterns-reuse-and-repeatability/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/scalable-terraform-patterns-reuse-and-repeatability/</guid><description>Child modules: Generic, composable &amp;ldquo;recipes&amp;rdquo; Terraform child modules offer a mechanism for abstracting, packaging, and re-using common Terraform resource configurations across multiple distinct Terraform projects. Child modules expose a simple interface to a more complex underlying configuration, similar to a programming language library or class; they&amp;rsquo;re generic abstractions of opinionated Terraform &amp;ldquo;recipes:&amp;rdquo;
graph LR; A[TF project 1]-->|apply|cloud-provider[cloud provider]; B[TF project 2]-->|apply|cloud-provider; C[TF project 3]-->|apply|cloud-provider; D[TF project 4]-->|apply|cloud-provider; E[TF module]-->A E-->B E-->C E-->D Overview:</description></item><item><title>Scalable Terraform patterns: compound workspace names</title><link>/blog/scalable-terraform-patterns-compound-workspace-names/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/scalable-terraform-patterns-compound-workspace-names/</guid><description>Problem statement As my colleague Brian Tajuddin posits in his rule of never just one:
Writing software these days involves asking the question &amp;ldquo;How many?&amp;rdquo; over and over again. There is one answer that&amp;rsquo;s always wrong.
So, here we are: you need to create and manage similar cloud infrastructure across many different AWS account/region combinations serving different logical environments, such as dev, staging, prod, etc.
For the most part, each environment should be the same as the others, infrastructure-wise.</description></item><item><title>Automated Terraform Plan Analysis With Terratest</title><link>/blog/automated-terraform-plan-analysis-with-terratest/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>/blog/automated-terraform-plan-analysis-with-terratest/</guid><description>How can terratest be used to automate Terraform plan analysis?
Problem You want to automate Terraform plan analysis in CI/CD, offsetting some of the manual toil associated with plan assessment. Tools like OPA offer policy-as-code solutions, but your team prefers to write Go.
Solution Usually, terratest is leveraged as a tool for authoring Terraform end-to-end tests that make post-terraform apply assertions on the correctness of the resulting infrastructure.
However, terratest can also be used to programmatically analyze Terraform plan output, effectively offering a Go-based alternative to tools like OPA and similar policy-as-code tools.</description></item><item><title>Using tfmigrate to Codify and Automate Terraform State Operations</title><link>/blog/using-tfmigrate-to-codify-and-automate-terraform-state-operations/</link><pubDate>Sun, 06 Aug 2023 13:35:02 +0000</pubDate><guid>/blog/using-tfmigrate-to-codify-and-automate-terraform-state-operations/</guid><description>An overview illustrating how tfmigrate can be used to codify and automate complex Terraform state operations. The corresponding reference example code can be viewed at github.com/mdb/tfmigrate-demo.
Problem The terraform CLI exposes a suite of state commands for advanced state management. However, these commands often require that engineers employ error-prone, manual, and ad hoc invocations of the terraform CLI out-of-band of CI/CD and code review.
How can we automate the migration of a Terraform-managed resource from one root module project configuration to a different root module project configuration, each using different S3 remote states?</description></item><item><title>Advanced Terraform Logic</title><link>/blog/advanced-terraform-logic/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/advanced-terraform-logic/</guid><description>Critics argue Terraform is limiting and doesn&amp;rsquo;t adequately enable the expression of complex logic. While imperfect, Terraform does indeed often accommodate moderately complex logic. As a reference example, the following illustrates how Terraform constructs such as for_each, for/in, if, try, various functions, and custom local data structures can be used to successfully satisfy a relatively logic-intensive use case.
As a bonus, the reference example also teases some broader techniques for automating platform engineering across an organization.</description></item><item><title>Terraform Provider Development Demystified</title><link>/blog/terraform-provider-development-demystified/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>/blog/terraform-provider-development-demystified/</guid><description>Many Terraform practitioners may be unfamiliar with provider development. How are providers actually implemented? The following offers an outline of a brief presentation I gave to the HBO Max Strategic Global Infrastructure team.
Review of the basics First, let&amp;rsquo;s establish a foundation, especially for those who may be less familiar with Terraform.
Terraform fundamentals Terraform enables users to describe infrastructure resources &amp;ndash; and their dependency relationships &amp;ndash; in .tf files using HCL, and to automate the creation and ongoing management of that infrastructure via the Terraform command line interface.</description></item><item><title>Transforming Terraform Output Values to Markdown with Terraputs</title><link>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</guid><description>An introduction to using a tool I wrote, terraputs, to transform Terraform configuration output values to markdown. I owe a hat tip to my colleagues Justin LaRose and Travis Truman for giving me the idea to create terraputs.
Problem You&amp;rsquo;d like to publish your Terraform configuration&amp;rsquo;s up-to-date output values in a human-friendly, easy-to-read, accessible format. Perhaps you&amp;rsquo;d like to publish their current values to your project&amp;rsquo;s README.md, a wiki, or some other form of documentation.</description></item><item><title>Terraform Plan Validation With Open Policy Agent</title><link>/blog/terraform-plan-validation-with-open-policy-agent/</link><pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate><guid>/blog/terraform-plan-validation-with-open-policy-agent/</guid><description>A pattern for automating Terraform plan analysis using Open Policy Agent.
Problem Your project&amp;rsquo;s CI/CD pipeline performs a Terraform plan prior to executing a Terraform apply. The CI/CD pipeline gates on the Terraform plan, such that team members can manually review its output for unwanted, problematic, and/or destructive resource modifications. While the manual plan review helps protect against the application of changes that could negatively impact systems&amp;rsquo; availability, the analysis is tedious and error prone.</description></item><item><title>Using Terraform workspaces</title><link>/blog/using-terraform-workspaces/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/using-terraform-workspaces/</guid><description>Problem: In distributed software engineering, it&amp;rsquo;s common to maintain multiple named environments, each of which is a distinct, logical grouping of infrastructure resources. For example, utilizing separate production and pre-production environments (staging, development, etc.) is a traditional multi-tiered environment strategy in structuring a phased software build, test, and release lifecycle (or even a phased approach in deploying the software infrastructure itself).
But how can a single Terraform configuration be used to safely manage infrastructure resources spanning multiple parallel environments?</description></item></channel></rss>