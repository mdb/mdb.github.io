<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>terraform on Mike Ball</title><link>/tags/terraform/</link><description>Recent content in terraform on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>Transforming Terraform Output Values to Markdown with Terraputs</title><link>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</guid><description>An introduction to using a tool I wrote, terraputs, to transform Terraform configuration output values to markdown. I owe a hat tip to my colleagues Justin LaRose and Travis Truman for giving me the idea to create terraputs.
Problem You&amp;rsquo;d like to publish your Terraform configuration&amp;rsquo;s up-to-date output values in a human-friendly, easy-to-read, accessible format. Perhaps you&amp;rsquo;d like to publish their current values to your project&amp;rsquo;s README.md, a wiki, or some other form of documentation.</description></item><item><title>Terraform Plan Validation With Open Policy Agent</title><link>/blog/terraform-plan-validation-with-open-policy-agent/</link><pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate><guid>/blog/terraform-plan-validation-with-open-policy-agent/</guid><description>A pattern for automating Terraform plan analysis using Open Policy Agent.
Problem Your project&amp;rsquo;s CI/CD pipeline performs a Terraform plan prior to executing a Terraform apply. The CI/CD pipeline gates on the Terraform plan, such that team members can manually review its output for unwanted, problematic, and/or destructive resource modifications. While the manual plan review helps protect against the application of changes that could negatively impact systems&amp;rsquo; availability, the analysis is tedious and error prone.</description></item><item><title>Using Terraform workspaces</title><link>/blog/using-terraform-workspaces/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/using-terraform-workspaces/</guid><description>Problem: In distributed software engineering, it&amp;rsquo;s common to maintain multiple named environments, each of which is a distinct, logical grouping of infrastructure resources. For example, utilizing separate production and pre-production environments (staging, development, etc.) is a traditional multi-tiered environment strategy in structuring a phased software build, test, and release lifecycle (or even a phased approach in deploying the software infrastructure itself). But how can a single Terraform configuration be used to safely manage infrastructure resources spanning multiple parallel environments?</description></item></channel></rss>