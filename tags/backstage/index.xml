<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>backstage on Mike Ball</title><link>/tags/backstage/</link><description>Recent content in backstage on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 03 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/backstage/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes on Implementing Backstage</title><link>/blog/notes-on-implementing-backstage/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/notes-on-implementing-backstage/</guid><description>Spotify&amp;rsquo;s Backstage project has been enjoying some recent acclaim. A colleague asked about my experience implementing Backstage for a large organization. These are my quick, dirty, and not-quite-comprehensive-but-hopefully-still-useful-ish notes.
What is Backstage? Backstage bills itself as an &amp;ldquo;open platform for building developer portals.&amp;rdquo; As its backbone, Backstage offers a service catalog, but also a healthy ecosystem of plugins for integrating other, third party tools: stuff like CI/CD pipelines, observability dashboards, documentation, cloud providers, infrastructure-as-code resources, incident management, project management, etc.</description></item></channel></rss>