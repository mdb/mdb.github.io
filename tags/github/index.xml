<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>github on Mike Ball</title><link>/tags/github/</link><description>Recent content in github on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 31 May 2023 13:35:02 +0000</lastBuildDate><atom:link href="/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Using the gh-dash gh CLI Extension to Manage GitHub Notifications</title><link>/blog/using-the-gh-dash-gh-cli-extension-to-manage-github-notifications/</link><pubDate>Wed, 31 May 2023 13:35:02 +0000</pubDate><guid>/blog/using-the-gh-dash-gh-cli-extension-to-manage-github-notifications/</guid><description>Written towards the goal of sharing my own practice with new team members, the following offers an overview of how I use the gh-dash CLI extension to manage GitHub notifications and pull request discussion.
Problem At scale, staying abreast of GitHub code review requests, GitHub issues of note, and related discussions is challenging. The challenges are further compounded when working across multiple GitHub organizations on both open and closed source projects, and especially when working as a member of multiple GitHub teams within one or more organizations.</description></item><item><title>Extending the gh CLI with Go</title><link>/blog/extending-the-gh-cli-with-go/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>/blog/extending-the-gh-cli-with-go/</guid><description>GitHub&amp;rsquo;s gh CLI can be enhanced via custom extensions. The following offers an introduction, as well as some notes and tips for doing so in Go.
What? Extensions How do gh extensions work? Implementation tips, suggestions, etc. Bonus experimental idea: bootstrapping developer experience and platform engineering Further reading What? Out of the box, the gh CLI supports a collection of commands for interacting with GitHub features like repositories, releases, pull requests, and more.</description></item><item><title>Querying GitHub Release Data With gh and jq</title><link>/blog/querying-github-release-data-with-gh-and-jq/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>/blog/querying-github-release-data-with-gh-and-jq/</guid><description>A demo of semi-advanced gh CLI and jq querying techniques.
Problem You&amp;rsquo;d like to list the latest patch release associated with each of the latest 5 minor versions of Grafana represented as a JSON array.
For example:
[&amp;#34;9.1.6&amp;#34;,&amp;#34;9.0.9&amp;#34;,&amp;#34;8.5.13&amp;#34;,&amp;#34;8.4.11&amp;#34;,&amp;#34;8.3.11&amp;#34;] Solution Leverage that&amp;hellip;
Grafana releases are published as GitHub releases The gh CLI supports an api command, enabling users to query GitHub API endpoints The GitHub API supports a list releases endpoint gh api supports a --jq flag, enabling the ability to invoke jq queries against GitHub API responses For example:</description></item><item><title>Triggering GitHub Actions From Outside of GitHub</title><link>/blog/triggering-github-actions-from-outside-of-github/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/triggering-github-actions-from-outside-of-github/</guid><description>An introduction to using custom repository dispatch events to trigger GitHub Actions from outside of GitHub.
Often, GitHub Actions are configured to trigger in response to common GitHub events, such as pushing a git commit, opening a pull request, or creating a git tag. But how can GitHub Actions workflows be triggered from events outside of GitHub? GitHub&amp;rsquo;s repository_dispatch event offers a solution.
A basic example First, create a .github/workflows/repo_dispatch_example.yml file (the name is arbitrary, though its location and .</description></item><item><title>Committing Via the Concourse Git Resource</title><link>/blog/committing-via-the-concourse-git-resource/</link><pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate><guid>/blog/committing-via-the-concourse-git-resource/</guid><description>A Concourse resource is any entity that can be checked for new versions, fetched at a specific version, and/or pushed up to idempotently create new versions. Concourse&amp;rsquo;s built-in git-resource is a Concourse resource for working with git repositories.
Pulling down a git repository for use in a pipeline job using the git-resource is fairly straight forward:
resources: - name: my-repo type: git source: branch: master uri: https://github.com/my-org/my-repo.git uername: git password: ((github-access-token)) jobs: - name: git-log plan: - get: my-repo - task: show-log config: inputs: - name: my-repo platform: linux image_resource: type: registry-image source: repository: node tag: 6.</description></item><item><title>Using the ConcourseCI pull request resource to verify Docker builds</title><link>/blog/using-the-concourseci-pull-request-resource-to-verify-docker-builds/</link><pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate><guid>/blog/using-the-concourseci-pull-request-resource-to-verify-docker-builds/</guid><description>Concourse.ci offers a free, open source continuous integration and delivery tool through which software development teams can establish and manage delivery pipelines.
Problem: TravisCI can be configured to run CI against a docker image&amp;rsquo;s source code repository. But how can Concourse&amp;rsquo;s pull-request resource be configured to test that docker build of a Dockerfile works as expected in a repo that houses such a Dockerfile?
Solution: Configure the Concourse&amp;rsquo;s pull request verification job to use the docker-image resource type, thus performing a docker build using the Dockerfile during a pull request&amp;rsquo;s continuous integration.</description></item><item><title>How to Contribute to a Project on GitHub</title><link>/blog/how-to-contribute-to-a-project-on-github/</link><pubDate>Tue, 23 Aug 2011 00:00:00 +0000</pubDate><guid>/blog/how-to-contribute-to-a-project-on-github/</guid><description>A quick how-to in contributing to an open source project hosted on GitHub. These instructions assume you&amp;rsquo;ve already created a GitHub account and properly set up your machine. For more details, GitHub also publishes similar instructions.
Set Up Your Repository Fork a project by visiting its URL on GitHub and clicking the &amp;ldquo;Fork&amp;rdquo; button
Clone your fork to your local machine:
git clone git@github.com:yourUsername/project-name.git Assign the original repository to a remote called &amp;ldquo;upstream&amp;rdquo; to retrieve updates from the original repository you forked:</description></item></channel></rss>