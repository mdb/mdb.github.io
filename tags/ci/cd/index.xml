<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Mike Ball</title><link>/tags/ci/cd/</link><description>Recent content in CI/CD on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Multi-stage Docker Builds</title><link>/blog/multi-stage-docker-builds/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/multi-stage-docker-builds/</guid><description>An introduction to leveraging multi-stage container image builds.
Problem Your application is deployed via a minimal OCI image, such as one produced by a Docker build. However, its build and test pipeline consists of many stages, each of which utilizes disparate technologies, system dependencies, and testing techniques. Consistently managing the build pipeline &amp;ndash; and its dependencies &amp;ndash; across local development environments and CI/CD systems is complicated. Perhaps its configuration and dependency management is spread across package.</description></item><item><title>Transforming Terraform Output Values to Markdown with Terraputs</title><link>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/transforming-terraform-output-values-to-markdown-with-terraputs/</guid><description>An introduction to using a tool I wrote, terraputs, to transform Terraform configuration output values to markdown. I owe a hat tip to my colleagues Justin LaRose and Travis Truman for giving me the idea to create terraputs.
Problem You&amp;rsquo;d like to publish your Terraform configuration&amp;rsquo;s up-to-date output values in a human-friendly, easy-to-read, accessible format. Perhaps you&amp;rsquo;d like to publish their current values to your project&amp;rsquo;s README.md, a wiki, or some other form of documentation.</description></item><item><title>Triggering GitHub Actions From Outside of GitHub</title><link>/blog/triggering-github-actions-from-outside-of-github/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/triggering-github-actions-from-outside-of-github/</guid><description>An introduction to using custom repository dispatch events to trigger GitHub Actions from outside of GitHub.
Often, GitHub Actions are configured to trigger in response to common GitHub events, such as pushing a git commit, opening a pull request, or creating a git tag. But how can GitHub Actions workflows be triggered from events outside of GitHub? GitHub&amp;rsquo;s repository_dispatch event offers a solution.
A basic example First, create a .github/workflows/repo_dispatch_example.yml file (the name is arbitrary, though its location and .</description></item><item><title>Testing Ansible Roles With Docker-in-Docker</title><link>/blog/testing-ansible-roles-with-docker-in-docker/</link><pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/testing-ansible-roles-with-docker-in-docker/</guid><description>A brief guide and reference example explaining a technique for using Molecule and a Docker-in-Docker dev/test environment to test Ansible roles.
Problem Ansible encourages the use of Molecule to test Ansible roles &amp;ldquo;against multiple instances, operating systems and distributions, virtualization providers, test frameworks, and testing scenarios.&amp;rdquo; Molecule documentation offers an overview of how to get started, including how to use Docker as the test driver provider, as well as how to use Ansible as the Molecule verifier.</description></item></channel></rss>