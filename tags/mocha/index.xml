<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mocha on Mike Ball</title><link>http://mikeball.info/tags/mocha/</link><description>Recent content in mocha on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Oct 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://mikeball.info/tags/mocha/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Node.js with Mocha, Expect.js, and Nock</title><link>http://mikeball.info/blog/testing-node.js-with-mocha-expect.js-and-nock/</link><pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/testing-node.js-with-mocha-expect.js-and-nock/</guid><description>Problem: Your Node.js code uses request or http to make http requests to URLs. You don’t want to make actual http calls, nor do you want to test request and/or http. How can you test that your code works as intended and interfaces properly with request and http?
Solution: Use nock. For the purposes of this example, I’ll also demonstrate how nock works in concert with mocha and expect.js.
Your node module // Let&amp;#39;s call this file/module flickr-feeder.</description></item><item><title>Using Mocha to Test a Node.js Server</title><link>http://mikeball.info/blog/using-mocha-to-test-a-node.js-server/</link><pubDate>Wed, 15 Aug 2012 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/using-mocha-to-test-a-node.js-server/</guid><description>How do you write Mocha tests against a Node.js server and run the tests during development, presumably while your server is already running?
Solution: Leverage fork to run the server code as a child process of the Mocha test. The following is a quick example of what this could look like.
The Server Code Let&amp;rsquo;s assume this code lives in your-project/server.js.
var http = require(&amp;#39;http&amp;#39;); var util = require(&amp;#39;util&amp;#39;); var port = process.</description></item></channel></rss>