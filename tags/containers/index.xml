<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>containers on Mike Ball</title><link>/tags/containers/</link><description>Recent content in containers on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 07 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/containers/index.xml" rel="self" type="application/rss+xml"/><item><title>Multi-stage Docker Builds</title><link>/blog/multi-stage-docker-builds/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/multi-stage-docker-builds/</guid><description>An introduction to leveraging multi-stage container image builds.
Problem Your application is deployed via a minimal OCI image, such as one produced by a Docker build. However, its build and test pipeline consists of many stages, each of which utilizes disparate technologies, system dependencies, and testing techniques. Consistently managing the build pipeline &amp;ndash; and its dependencies &amp;ndash; across local development environments and CI/CD systems is complicated. Perhaps its configuration and dependency management is spread across package.</description></item></channel></rss>