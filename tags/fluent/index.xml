<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fluent on Mike Ball</title><link>http://mikeball.info/tags/fluent/</link><description>Recent content in fluent on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 31 May 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://mikeball.info/tags/fluent/index.xml" rel="self" type="application/rss+xml"/><item><title>Fluent 2012 Notes: Nicholas Zakas on Maintainable JavaScript</title><link>http://mikeball.info/blog/fluent-2012-notes-nicholas-zakas-on-maintainable-javascript/</link><pubDate>Thu, 31 May 2012 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/fluent-2012-notes-nicholas-zakas-on-maintainable-javascript/</guid><description>My notes from Nicholas Zakas&amp;rsquo;s 2012 Fluent talk on Maintainable JavaScript.
The primary features of maintainable code:
works for at least 5 years without major changes intuitive understandable adaptable - developers must be able to change without breaking completely extendable - the code can be built upon to do more than was originally intended debuggable - developers should be able to easily identify the source of problems testable - code that can be validated with unit tests saves time and ensures quality Maintainability requires coordination.</description></item></channel></rss>