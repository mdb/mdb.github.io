<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grafana on Mike Ball</title><link>/tags/grafana/</link><description>Recent content in grafana on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/grafana/index.xml" rel="self" type="application/rss+xml"/><item><title>Advanced Terraform Logic</title><link>/blog/advanced-terraform-logic/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/advanced-terraform-logic/</guid><description>Critics argue Terraform is limiting and doesn&amp;rsquo;t adequately enable the expression of complex logic in HCL. While imperfect, Terraform does indeed often accommodate complex logic. As a reference example, the following illustrates how Terraform constructs such as for_each, for/in, if, try, various functions, and custom local data structures can be used to successfully satisfy a relatively complex, logic-intensive use case.
github.com/mdb/terraform-advanced-logic-demo homes the source code referenced throughout this post.
Problem For example&amp;rsquo;s sake, imagine a contrived scenario:</description></item></channel></rss>