<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS on Mike Ball</title><link>/tags/aws/</link><description>Recent content in AWS on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Scalable Terraform patterns: compound workspace names</title><link>/blog/scalable-terraform-patterns-compound-workspace-names/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/scalable-terraform-patterns-compound-workspace-names/</guid><description>Problem statement You need to create and manage similar cloud infrastructure across many different AWS account/region combinations serving different logical environments, such as dev, staging, prod, etc.
For the most part, each environment should be the same as the others, infrastructure-wise. However, there may also be necessary differences. For example:
a dev environment may consist of a single AWS region, while prod is composed of multiple AWS regions. prod&amp;rsquo;s us-west-2 region may require less compute redundancy than its us-east-1 region.</description></item><item><title>Unit Testing AWS S3 Downloads in Go</title><link>/blog/unit-testing-aws-s3-downloads-in-go/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>/blog/unit-testing-aws-s3-downloads-in-go/</guid><description>An example of github.com/aws/aws-sdk-go/awstesting/unit&amp;rsquo;s use.
Problem How do you unit test a Go function that wraps aws-sdk-go&amp;rsquo;s s3manager#Downloader.Download without issuing real HTTP requests to the AWS API (and without using an additional tool like localstack)?
Solution Make the implementation&amp;rsquo;s *s3manager.Downloader configurable; in testing, use the github.com/aws/aws-sdk-go/awstesting/unit package to create a custom *s3manager.Downloader that uses a local testdata directory as a mock AWS S3 bucket.
Example Consider a contrived s3object package. The package provides an S3Object type, which features a Download method that wraps s3manager#Downloader.</description></item><item><title>Mocking aws-sdk With Jest</title><link>/blog/mocking-aws-sdk-with-jest/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>/blog/mocking-aws-sdk-with-jest/</guid><description>A technique for mocking aws-sdk methods with jest without the use of aws-sdk-mock.
Problem Your Node.js application uses the aws-sdk NPM module via functions like getEksClusterCount, for example:
import AWS from &amp;#39;aws-sdk&amp;#39;; const export getEksClusterCount = async () =&amp;gt; { const eks = new AWS.EKS(); try { const clusters = await eks.listClusters().promise(); return clusters.length; catch (e) { throw e; } }; How can getEksClusterCount&amp;rsquo;s use of AWS.EKS be mocked out for unit testing?</description></item><item><title>Lobber</title><link>/projects/lobber/</link><pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate><guid>/projects/lobber/</guid><description>Lobber is a simple command line utility used to quickly upload a directory to Amazon S3.
Lobber is built with Ruby and can be downloaded from Rubygems.
View its source code on GitHub Â»</description></item></channel></rss>