<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iac on Mike Ball</title><link>/tags/iac/</link><description>Recent content in iac on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="/tags/iac/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform: self-validating plan-time permissions checks</title><link>/blog/terraform-self-validating-plan-time-permissions-checks/</link><pubDate>Fri, 21 Mar 2025 00:00:00 +0000</pubDate><guid>/blog/terraform-self-validating-plan-time-permissions-checks/</guid><description>Problem Your Terraform module uses the AWS provider. In CI/CD, the plan associated with a GitHub pull request passes. However, after merging the pull request, the full apply fails; the IAM role used by the AWS provider lacks sufficient permissions.
How can you &amp;ldquo;shift left&amp;rdquo; and discover such problems earlier in the CI/CD pipeline at plan time, before a pull request is merged?
Solution Leverage the iam_principal_policy_simulation data source; test whether the utilized IAM role has the necessary access to do its own work.</description></item><item><title>Packer: conditionally omit HCL block configuration</title><link>/blog/packer-conditionally-omit-hcl-block-configuration/</link><pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate><guid>/blog/packer-conditionally-omit-hcl-block-configuration/</guid><description>Problem You&amp;rsquo;re using Packer to build AWS EC2 AMIs. How can you parameterize builds to conditionally configure or omit amazon-ebs.launch_block_device_mappings based on the value of an input variable?
Solution Leverage dynamic blocks; based on an input variable value, pass a for_each argument with a length of 0 to omit the configuration of launch_block_device_mappings.
Example The following Packer template supports a create_nonroot_devices input variable. By default, its value is false; packer build results in an AMI with no nonroot launch_block_device_mappings:</description></item><item><title>Terraform Patterns: the wrapper module</title><link>/blog/terraform-patterns-the-wrapper-module/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/terraform-patterns-the-wrapper-module/</guid><description>Problem Internal to your organization, you want to provide engineers simplified, higher level abstractions for managing AWS resources via Terraform child modules. You could build such modules in-house, but you&amp;rsquo;re wary of the level of effort required to do so and the resulting maintenance burden, especially considering the existing ecosystem of well-regarded community-maintained open source modules. However, many of the community modules support input variables and usage patterns that are too broad, require too much specialized AWS knowledge, and aren&amp;rsquo;t compliant with your organization&amp;rsquo;s &amp;ldquo;golden path&amp;rdquo; standards, guardrails, and supported patterns.</description></item><item><title>Scalable Terraform Patterns: Reuse and Repeatability</title><link>/blog/scalable-terraform-patterns-reuse-and-repeatability/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/scalable-terraform-patterns-reuse-and-repeatability/</guid><description>Child modules: Generic, composable &amp;ldquo;recipes&amp;rdquo; Terraform child modules offer a mechanism for abstracting, packaging, and re-using common Terraform resource configurations across multiple distinct Terraform projects. Child modules expose a simple interface to a more complex underlying configuration, similar to a programming language library or class; they&amp;rsquo;re generic abstractions of opinionated Terraform &amp;ldquo;recipes:&amp;rdquo;
graph LR; A[TF project 1]-->|apply|cloud-provider[cloud provider]; B[TF project 2]-->|apply|cloud-provider; C[TF project 3]-->|apply|cloud-provider; D[TF project 4]-->|apply|cloud-provider; E[TF module]-->A E-->B E-->C E-->D Overview:</description></item><item><title>Scalable Terraform patterns: compound workspace names</title><link>/blog/scalable-terraform-patterns-compound-workspace-names/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><guid>/blog/scalable-terraform-patterns-compound-workspace-names/</guid><description>Problem statement As my colleague Brian Tajuddin posits in his rule of never just one:
Writing software these days involves asking the question &amp;ldquo;How many?&amp;rdquo; over and over again. There is one answer that&amp;rsquo;s always wrong.
So, here we are: you need to create and manage similar cloud infrastructure across many different AWS account/region combinations serving different logical environments, such as dev, staging, prod, etc.
For the most part, each environment should be the same as the others, infrastructure-wise.</description></item><item><title>Automated Terraform Plan Analysis With Terratest</title><link>/blog/automated-terraform-plan-analysis-with-terratest/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>/blog/automated-terraform-plan-analysis-with-terratest/</guid><description>How can terratest be used to automate Terraform plan analysis?
Problem You want to automate Terraform plan analysis in CI/CD, offsetting some of the manual toil associated with plan assessment. Tools like OPA offer policy-as-code solutions, but your team prefers to write Go.
Solution Usually, terratest is leveraged as a tool for authoring Terraform end-to-end tests that make post-terraform apply assertions on the correctness of the resulting infrastructure.
However, terratest can also be used to programmatically analyze Terraform plan output, effectively offering a Go-based alternative to tools like OPA and similar policy-as-code tools.</description></item></channel></rss>