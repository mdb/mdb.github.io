<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tfmigrate on Mike Ball</title><link>/tags/tfmigrate/</link><description>Recent content in tfmigrate on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Aug 2023 13:35:02 +0000</lastBuildDate><atom:link href="/tags/tfmigrate/index.xml" rel="self" type="application/rss+xml"/><item><title>Using tfmigrate to Codify and Automate Terraform State Operations</title><link>/blog/using-tfmigrate-to-codify-and-automate-terraform-state-operations/</link><pubDate>Sun, 06 Aug 2023 13:35:02 +0000</pubDate><guid>/blog/using-tfmigrate-to-codify-and-automate-terraform-state-operations/</guid><description>An overview illustrating how tfmigrate can be used to codify and automate complex Terraform state operations. The corresponding reference example code can be viewed at github.com/mdb/tfmigrate.
Problem The terraform CLI exposes a suite of state commands for advanced state management. However, these commands often require engineers to employ error-prone, manual, and ad hoc invocations of the terraform CLI out-of-band of CI/CD and code review.
How can we automate the migration of a Terraform-managed resource from one root module project configuration to a different root module project configuration, each using different S3 remote states?</description></item></channel></rss>