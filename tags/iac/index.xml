<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iac on Mike Ball</title><link>/tags/iac/</link><description>Recent content in iac on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 11 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/iac/index.xml" rel="self" type="application/rss+xml"/><item><title>Scalable Terraform patterns: compound workspace names</title><link>/blog/scalable-terraform-patterns-compound-workspace-names/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>/blog/scalable-terraform-patterns-compound-workspace-names/</guid><description>Problem statement You need to create and manage similar cloud infrastructure across many different AWS account/region combinations serving different logical environments, such as dev, staging, prod, etc.
For the most part, each environment should be the same as the others, infrastructure-wise. However, there may also be necessary differences. For example:
a dev environment may consist of a single AWS region, while prod is composed of multiple AWS regions. prod&amp;rsquo;s us-west-2 region may require less compute redundancy than its us-east-1 region.</description></item><item><title>Automated Terraform Plan Analysis With Terratest</title><link>/blog/automated-terraform-plan-analysis-with-terratest/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>/blog/automated-terraform-plan-analysis-with-terratest/</guid><description>How can terratest be used to automate Terraform plan analysis?
Problem You want to automate Terraform plan analysis in CI/CD, offsetting some of the manual toil associated with plan assessment. Tools like OPA offer policy-as-code solutions, but your team prefers to write Go.
Solution Usually, terratest is leveraged as a tool for authoring Terraform end-to-end tests that make post-terraform apply assertions on the correctness of the resulting infrastructure.
However, terratest can also be used to programmatically analyze Terraform plan output, effectively offering a Go-based alternative to tools like OPA and similar policy-as-code tools.</description></item></channel></rss>