<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>platform engineering on Mike Ball</title><link>/tags/platform-engineering/</link><description>Recent content in platform engineering on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/platform-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>SLOs</title><link>/blog/slos/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/slos/</guid><description>Service level objectives &amp;ndash; SLOs &amp;ndash; are a mechanism for understanding and planning reliability.
Definitions service level indicator (SLI) - a key metric for a system that describes its operational health
Example: the percentage of video starts that encounter an error
service level objective (SLO) - a target for an SLI
Example: 99.9% of video starts do not encounter an error
service level agreement (SLA) - what happens when an SLO is met or missed</description></item><item><title>Notes on Implementing Backstage</title><link>/blog/notes-on-implementing-backstage/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/notes-on-implementing-backstage/</guid><description>Spotify&amp;rsquo;s Backstage project has been enjoying some recent acclaim. A colleague asked about my experience implementing Backstage for a large organization. These are my quick, dirty, and not-quite-comprehensive-but-hopefully-still-useful-ish notes.
What is Backstage? Backstage bills itself as an &amp;ldquo;open platform for building developer portals.&amp;rdquo; As its backbone, Backstage offers a service catalog, but also a healthy ecosystem of plugins for integrating other, third party tools: stuff like CI/CD pipelines, observability dashboards, documentation, cloud providers, infrastructure-as-code resources, incident management, project management, etc.</description></item><item><title>Extending the gh CLI with Go</title><link>/blog/extending-the-gh-cli-with-go/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>/blog/extending-the-gh-cli-with-go/</guid><description>GitHub&amp;rsquo;s gh CLI can be enhanced via custom extensions. The following offers an introduction, as well as some notes and tips for doing so in Go.
What? Extensions How do gh extensions work? Implementation tips, suggestions, etc. Bonus experimental idea: bootstrapping developer experience and platform engineering Further reading What? Out of the box, the gh CLI supports a collection of commands for interacting with GitHub features like repositories, releases, pull requests, and more.</description></item><item><title>What is the Kubernetes controller pattern?</title><link>/blog/what-is-the-kubernetes-controller-pattern/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>/blog/what-is-the-kubernetes-controller-pattern/</guid><description>A colleague recently relayed to me their vision for a microservices architecture involving the automatic injection of sidecar containers to all Deployments&amp;rsquo; Pods within a Kubernetes namespace. Naive to Kubernetes&amp;rsquo; support for custom controllers, the colleague hoped to proof-of-concept the idea via enhanced CI/CD pipeline logic that opaquely extended Kubernetes Deployment manifest YAML prior to each application deployment. As an alternative, the following offers an overview of the Kubernetes controller pattern, as well as a tour of a basic reference implementation.</description></item><item><title>What is the Kubernetes Operator Pattern?</title><link>/blog/what-is-the-kubernetes-operator-pattern/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/what-is-the-kubernetes-operator-pattern/</guid><description>An overview of the Kubernetes operator pattern and the use of custom resources and custom controllers in extending Kubernetes functionality.
What? Broadly speaking, Kubernetes operators seek to abstract, codify, and automate operational tasks beyond what out-of-the-box Kubernetes itself provides.
As summarized in the CNCF Operator Whitepaper:
In Kubernetes, an operator provides intelligent, dynamic management capabilities by extending the functionality of the API.
These operator components allow for the automation of common processes as well as reactive applications that can continually adapt to their environment.</description></item><item><title>Advanced Terraform Logic</title><link>/blog/advanced-terraform-logic/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/advanced-terraform-logic/</guid><description>Critics argue Terraform is limiting and doesn&amp;rsquo;t adequately enable the expression of complex logic. While imperfect, Terraform does indeed often accommodate moderately complex logic. As a reference example, the following illustrates how Terraform constructs such as for_each, for/in, if, try, various functions, and custom local data structures can be used to successfully satisfy a relatively logic-intensive use case.
As a bonus, the reference example also teases some broader techniques for automating platform engineering across an organization.</description></item></channel></rss>