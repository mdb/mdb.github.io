<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Mike Ball</title><link>/tags/golang/</link><description>Recent content in golang on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform Provider Development Demystified</title><link>/blog/terraform-provider-development-demystified/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>/blog/terraform-provider-development-demystified/</guid><description>Many Terraform practitioners may be unfamiliar with provider development. How are providers actually implemented? The following offers an outline of a brief presentation I gave to the HBO Max Strategic Global Infrastructure team.
Review of the basics First, let&amp;rsquo;s re-establish a foundation, especially for those who may be less familiar with Terraform.
Terraform fundamentals Terraform enables users to describe infrastructure resources &amp;ndash; and their dependency relationships &amp;ndash; in .tf files using HCL, and to automate the creation and ongoing management of that infrastructure via the Terraform command line inferface.</description></item><item><title>Go Concurrency With Goroutines and Channels</title><link>/blog/go-concurrency-with-goroutines-and-channels/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/go-concurrency-with-goroutines-and-channels/</guid><description>Some introductory notes on Go concurrency, goroutines, and channels, largely serving as a slightly-more-indepth supplement to a brief 2018 overview and example.
Goroutines Normally, calling a function — foo(), for example — is a blocking operation. This means that program execution waits for it to finish before proceeding.
However, invoking a function with the go keyword — go foo(), for example — is non-blocking. When invoked as go foo(), Go runs foo() as a separate task managed by Go.</description></item><item><title>HTTP Middleware in Go with httptest.ResponseRecorder</title><link>/blog/http-middleware-in-go-with-httptest.responserecorder/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/http-middleware-in-go-with-httptest.responserecorder/</guid><description>A technique for creating &amp;ldquo;post-process&amp;rdquo; HTTP middleware in Go.
Problem You need to add a bit of extra &amp;ldquo;post-process&amp;rdquo; functionality or logic beyond what an existing http.Handler offers, but don&amp;rsquo;t have the ability to modify the existing handler, perhaps because it&amp;rsquo;s provided by a third party package. For example, how might you add an HTTP response header to the handler&amp;rsquo;s HTTP response before the response is sent to the client?</description></item><item><title>Channels in Go</title><link>/blog/channels-in-go/</link><pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate><guid>/blog/channels-in-go/</guid><description>Through goroutines and channels, Go offers constructs for concurrent programming. A goroutine is a concurrent function execution, while a channel offers a communication mechanism through which one goroutine can pass values of a specific type to another goroutine.
For example, the following code performs three HTTP requests concurrently, reports back the request URL, the request response time, and its HTTP response status code for each request, and also the total time spent executing the program.</description></item><item><title>Serialize Empty Structs to JSON in Go</title><link>/blog/serialize-empty-structs-to-json-in-go/</link><pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate><guid>/blog/serialize-empty-structs-to-json-in-go/</guid><description>Problem: How can a Golang struct be serialized to JSON without including an empty object representing an empty struct within the parent struct?
For example, given a MyStruct struct such as the following:
type MyStruct struct { Data MyData `json:&amp;#34;data,omitempty&amp;#34;` Status string `json:&amp;#34;status,omitempty&amp;#34;` } And a str instance of MyStruct marshal&amp;rsquo;d to JSON:
str := &amp;amp;MyStruct{ Status: &amp;#34;some-status&amp;#34; } j, _ := json.Marshal(str) Println(string(j)) The yielded JSON contains an empty &amp;quot;data&amp;quot;: {}, which may be problematic, depending on usage:</description></item></channel></rss>