<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ansible on Mike Ball</title><link>/tags/ansible/</link><description>Recent content in ansible on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ansible/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Ansible Roles With Docker-in-Docker</title><link>/blog/testing-ansible-roles-with-docker-in-docker/</link><pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/testing-ansible-roles-with-docker-in-docker/</guid><description>A brief guide and reference example explaining a technique for using Molecule and a Docker-in-Docker dev/test environment to test Ansible roles.
Problem Ansible encourages the use of Molecule to test Ansible roles &amp;ldquo;against multiple instances, operating systems and distributions, virtualization providers, test frameworks, and testing scenarios.&amp;rdquo; Molecule documentation offers an overview of how to get started, including how to use Docker as the test driver provider, as well as how to use Ansible as the Molecule verifier.</description></item><item><title>Using wget over Ansible's get_url</title><link>/blog/using-wget-over-ansibles-get_url/</link><pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate><guid>/blog/using-wget-over-ansibles-get_url/</guid><description>Problem: In provisioning a server, your Ansible playbook needs to download files from a URL behinded authentication, such as a private GitHub repository. In Ansible 2.0, Ansible&amp;rsquo;s get_url supports custom headers — such as Authorization — but pre-2.0 Ansible does not.
Solution: Use wget, a wgetrc, and ansible-vault.
Step 1: Generate a GitHub access token
Step 2: Store the token in an Ansible group_var at your_playbook_dir/group_vars/all:
github_token: &amp;#34;your access token value&amp;#34; Step 3: Use ansible-vault to encrypt your github_token; enter a password at the prompt:</description></item><item><title>JSConf 2015: Headless Testing Against Real Web Browsers</title><link>/blog/jsconf-2015-headless-testing-against-real-web-browsers/</link><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>/blog/jsconf-2015-headless-testing-against-real-web-browsers/</guid><description>I spoke at JSConf 2015 about how to test Google Polymer web components against real web browsers in a headless Linux using Xvfb.
My talk offered background on my philosophy, why some software requires tests be run against a real GUI, and also covered a basic introduction to Xvfb, or X Virtual Frame Buffer. I also demo&amp;rsquo;d polymer-testing-box, a basic reference implementation illustrating how to provision an Ubuntu VM with all the prerequisites necessary to headlessly run Google Polymer web-component-tester tests against Chrome and Firefox.</description></item></channel></rss>