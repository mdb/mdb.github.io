<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>infrastructure on Mike Ball</title><link>http://mikeball.info/tags/infrastructure/</link><description>Recent content in infrastructure on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://mikeball.info/tags/infrastructure/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Terraform workspaces</title><link>http://mikeball.info/blog/using-terraform-workspaces/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/using-terraform-workspaces/</guid><description>Problem: In distributed software engineering, it&amp;rsquo;s common to maintain multiple named environments, each of which is a distinct, logical grouping of infrastructure resources. For example, utilizing separate production and pre-production environments (staging, development, etc.) is a traditional multi-tiered environment strategy in structuring a phased software build, test, and release lifecycle (or even a phased approach in deploying the software infrastructure itself). But how can a single Terraform configuration be used to safely manage infrastructure resources spanning multiple parallel environments?</description></item></channel></rss>