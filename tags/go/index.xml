<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Mike Ball</title><link>/tags/go/</link><description>Recent content in go on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Extending the gh CLI with Go</title><link>/blog/extending-the-gh-cli-with-go/</link><pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><guid>/blog/extending-the-gh-cli-with-go/</guid><description>GitHub&amp;rsquo;s gh CLI can be enhanced via custom extensions. The following offers an introduction, as well as some notes and tips for doing so in Go.
What? Extensions How do gh extensions work? Implementation tips, suggestions, etc. Bonus experimental idea: bootstrapping developer experience and platform engineering Further reading What? Out of the box, the gh CLI supports a collection of commands for interacting with GitHub features like repositories, releases, pull requests, and more.</description></item><item><title>Go Test Parallelization</title><link>/blog/go-test-parallelization/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/go-test-parallelization/</guid><description>A brief introduction to using Go&amp;rsquo;s testing package&amp;rsquo;s T.Parallel() to parallelize tests.
Problem Your Go project&amp;rsquo;s tests are slow and run serially. Or perhaps they&amp;rsquo;re not slow, but they run serially and could be faster.
Solution Consider running the test cases in parallel.
Simple non-parallelized example As a starting point, consider a simple non-parallelized test:
package main import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;time&amp;#34; ) func TestSimple(t *testing.T) { testCases := []struct { name string }{{ &amp;#34;1&amp;#34;, }, { &amp;#34;2&amp;#34;, }, { &amp;#34;3&amp;#34;, }, { &amp;#34;4&amp;#34;, }, { &amp;#34;5&amp;#34;, }} t.</description></item><item><title>Channels in Go</title><link>/blog/channels-in-go/</link><pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate><guid>/blog/channels-in-go/</guid><description>Through goroutines and channels, Go offers constructs for concurrent programming. A goroutine is a concurrent function execution, while a channel offers a communication mechanism through which one goroutine can pass values of a specific type to another goroutine.
For example, the following code performs three HTTP requests concurrently, reports back the request URL, the request response time, and its HTTP response status code for each request, and also the total time spent executing the program.</description></item></channel></rss>