<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>await on Mike Ball</title><link>/tags/await/</link><description>Recent content in await on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/await/index.xml" rel="self" type="application/rss+xml"/><item><title>Collecting Paginated HTTP API Response Data Using JavaScript's async/await</title><link>/blog/collecting-paginated-http-api-response-data-using-javascripts-async/await/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/collecting-paginated-http-api-response-data-using-javascripts-async/await/</guid><description>Collecting all pages of data from a paginated HTTP API can be a bit tricky in JavaScript, especially for developers who are less familiar with asynchronous JavaScript&amp;rsquo;s nuances. The following offers a reference example using JavaScript&amp;rsquo;s async/await.
Problem You need to fetch all pages of data from a paginated HTTP API in JavaScript; you&amp;rsquo;d like to do so using fetch, and you&amp;rsquo;d like to leverage async/await. While this is a relatively common scenario, how best to tackle it in JavaScript using async/await is a bit tricky.</description></item></channel></rss>