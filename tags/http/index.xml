<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP on Mike Ball</title><link>http://mikeball.info/tags/http/</link><description>Recent content in HTTP on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 13 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://mikeball.info/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP Middleware in Go with httptest.ResponseRecorder</title><link>http://mikeball.info/blog/http-middleware-in-go-with-httptest.responserecorder/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/http-middleware-in-go-with-httptest.responserecorder/</guid><description>A technique for creating &amp;ldquo;post-process&amp;rdquo; HTTP middleware in Go.
Problem You need to add a bit of extra &amp;ldquo;post-process&amp;rdquo; functionality or logic beyond what an existing http.Handler offers, but don&amp;rsquo;t have the ability to modify the existing handler, perhaps because it&amp;rsquo;s provided by a third party package. For example, how might you add an HTTP response header to the handler&amp;rsquo;s HTTP response before the response is sent to the client?</description></item><item><title>A Simple Ruby Class Example</title><link>http://mikeball.info/blog/a-simple-ruby-class-example/</link><pubDate>Sun, 30 Mar 2014 00:00:00 +0000</pubDate><guid>http://mikeball.info/blog/a-simple-ruby-class-example/</guid><description>Some colleagues asked about basic Ruby examples. The following RemoteConfig class makes an HTTP request and provides an object-oriented interface to XML served at the URL requested. The class serves as simple intro to some common needs and Ruby-oriented language features:
dynamic method definition performing GET requests over HTTPS creating a basic, object-oriented interface parsing attribute-heavy XML with XPATH queries testing with Rspec and Webmock The XML Assume the following XML is hosted at https://somedomain.</description></item></channel></rss>