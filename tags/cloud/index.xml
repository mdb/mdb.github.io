<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cloud on Mike Ball</title><link>/tags/cloud/</link><description>Recent content in cloud on Mike Ball</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform Provider Development Demystified</title><link>/blog/terraform-provider-development-demystified/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>/blog/terraform-provider-development-demystified/</guid><description>Many Terraform practitioners may be unfamiliar with provider development. How are providers actually implemented? The following offers an outline of a brief presentation I gave to the HBO Max Strategic Global Infrastructure team.
Review of the basics First, let&amp;rsquo;s establish a foundation, especially for those who may be less familiar with Terraform.
Terraform fundamentals Terraform enables users to describe infrastructure resources &amp;ndash; and their dependency relationships &amp;ndash; in .tf files using HCL, and to automate the creation and ongoing management of that infrastructure via the Terraform command line interface.</description></item><item><title>Using Terraform workspaces</title><link>/blog/using-terraform-workspaces/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/using-terraform-workspaces/</guid><description>Problem: In distributed software engineering, it&amp;rsquo;s common to maintain multiple named environments, each of which is a distinct, logical grouping of infrastructure resources. For example, utilizing separate production and pre-production environments (staging, development, etc.) is a traditional multi-tiered environment strategy in structuring a phased software build, test, and release lifecycle (or even a phased approach in deploying the software infrastructure itself). But how can a single Terraform configuration be used to safely manage infrastructure resources spanning multiple parallel environments?</description></item><item><title>Deploying Wordpress to Pagodabox</title><link>/blog/deploying-wordpress-to-pagodabox/</link><pubDate>Sat, 24 Mar 2012 00:00:00 +0000</pubDate><guid>/blog/deploying-wordpress-to-pagodabox/</guid><description>Services such as Heroku provide cloud deployment options for Rails, Sinatra, Django, and Node.js applications, but what about Wordpress? Pagodabox seems promising. Here&amp;rsquo;s how to set up a Wordpress Pagodabox deployment workflow.
Note that these instructions are purposefully verbose in an effort to help those for whom such a workflow may be new and intimidating. Also note that these instructions assume you&amp;rsquo;re using a Mac.
Set up a local instance of Wordpress using MAMP There&amp;rsquo;s probably a fun way to do this with Vagrant, but MAMP will serve our purposes here.</description></item></channel></rss>